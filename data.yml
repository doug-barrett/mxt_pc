defaultStorageMapping: null
jobs:
  Job-26:
    excludeSelector: ""
    id: 26
    includeSelector: "{ LOAD_* }"
    name: LOAD
    steps: []
    subgraphs: []
  Job-27:
    excludeSelector: ""
    id: 27
    includeSelector: "{ STG_ODS_*_05_* }"
    name: STG_ODS_05
    steps: []
    subgraphs: []
  Job-28:
    excludeSelector: ""
    id: 28
    includeSelector: "{ STG_ODS_*_10_* }"
    name: STG_ODS_10
    steps: []
    subgraphs: []
  Job-29:
    excludeSelector: ""
    id: 29
    includeSelector: "{ STG_ODS_*_15_* }"
    name: STG_ODS_15
    steps: []
    subgraphs: []
  Job-30:
    excludeSelector: ""
    id: 30
    includeSelector: "{ ODS_* }"
    name: ODS
    steps: []
    subgraphs: []
  Job-37:
    excludeSelector: ""
    id: 37
    includeSelector: "{ STG_ODS_*_00_* }"
    name: STG_ODS_00
    steps: []
    subgraphs: []
locations:
  DATASTORE:
    mappingDefinitions: {}
  DATASTORE_VIEW:
    mappingDefinitions: {}
  EDW:
    mappingDefinitions: {}
  EDW_REPORTING:
    mappingDefinitions: {}
  LOAD:
    mappingDefinitions: {}
  ODS:
    mappingDefinitions: {}
  RAW_AS01_CLNPDTA:
    mappingDefinitions: {}
  RAW_AS01_IEAPDTA:
    mappingDefinitions: {}
  RAW_GWC_BC_PROD_VF:
    mappingDefinitions: {}
  RAW_GWC_CC_PROD_VF:
    mappingDefinitions: {}
  RAW_GWC_PC_PROD_VF:
    mappingDefinitions: {}
  RAW_GW_BC_PROD:
    mappingDefinitions: {}
  RAW_GW_CC_PROD:
    mappingDefinitions: {}
  RAW_GW_PC_PROD:
    mappingDefinitions: {}
  SBL:
    mappingDefinitions: {}
  SRC_REPORTING:
    mappingDefinitions: {}
  STAGE:
    mappingDefinitions: {}
macros:
  Macro-1:
    id: "1"
    macroString: ""
packages: {}
projects: {}
stepTypes:
  StepType-10:
    id: "10"
    isDisabled: false
    metadata:
      defaultStorageLocation: ODS
      error: null
      nodeMetadataSpec: |
        capitalized: ODS
        short: ODS
        plural: Operational Data Stores
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create ODS Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create ODS View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key %}

                    {% for source in sources %}
                        
                        {{ stage('DELETE FROM ' + source.name | string) }}
                        DELETE FROM {{ ref_no_link(node.location.name, node.name) }}
                        WHERE EXISTS
                        (
                            SELECT 0
                            {{ source.join }}
                            WHERE 
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                {{ get_source_transform(col) }} = "{{ node.name}}"."{{ col.name }}" 
                            {% endfor %}
                        );
                        {{ stage('INSERT INTO ' + source.name | string) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns%}
                                {{ col.name }}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
                        SELECT
                        {% for col in source.columns%}
                            {% if col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS "{{ col.name }}"
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS "{{ col.name }}"
                            {% else %}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                        ;
                    {% endfor %}
                {% endif %}
                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}
                        	
            {% endif %}

            {% if config.testsEnabled %}
                {% for test in node.tests %}
                    {% if test.runOrder == 'After' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% for column in columns %}
                    {% for test in column.tests %}
                        {{ test_stage(column.name + ": " + test.name) }}
                        {{ test.templateString }}
                    {% endfor %}
                {% endfor %}
            {% endif %}
    name: ODS
    version: 1
  StepType-12:
    id: "12"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: 'CustomProcedure'                   # Common Name (string, required)
        short: 'STG'                                     # Node prefix. A '_' delimiter will be added automatically. (string, required)
        plural: 'My Node Names'                          # plural name of common name (string, required)
        tagColor: '#FF5A5F'                              # Node color. CSS colors or hex colors (string, required)

        config:                                          # Array of the following config items
        - groupName: 'Core UI Elements'                  # Name of config group (string, required)
          description: 'Core UI Elements'                # Description of group. Displayed in the GUI (string)
          enableIf: 'true'                               # If true, display this config group, else hide this config group. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')

          items:                                         # This will be followed by all your config items/UI elements for the given group (array, required)

                                                         ## Core UI Elements ##
          - type: businessKeyColumns                     # Selector for business key columns
            displayName: 'Business Key'                  # displayName for type businessKeyColumns (cannot be modified by user) 
            attributeName: 'isBusinessKey'               # attributeName for type businessKeyColumns (cannot be modified by user) 
            isRequired: false                            # Require input from user for this config element (boolean, defaults false)
            enableIf: 'true'                             # If true, display this element, else hide this element. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')

          - type: materializationSelector                # Dropdown selector for materialization options
            default: 'table'                             # Default selection (string)
            options:                                     # Materialization options allowed for this node. (array of strings 'table' | 'view')
            - 'table'  
            - 'view'  
            isRequired: false                            # If a config item is required (boolean, defaults false)
            enableIf: 'true'                             # If true, display this element, else hide this element. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')

          - type: overrideSQLToggle                      # Enables GUI input for DDL SQL 
            displayName: 'Override Create SQL'           # displayName for type overrideSQLToggle (cannot be modified by user) 
            attributeName: 'node.override.create'        # attributeName for type overrideSQLToggle (cannot be modified by user) 
            enableIf: 'true'                             # If true, display this element, else hide this element. 
            default: 'true'                              # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')
                                                      
        - groupName: 'Customizable Core UI Elements'     # Name of config group (string, required)
          description: 'Customizable Core UI Elements'   # Description of group. Displayed in the GUI (string)
          enableIf: 'true'                               # If true, display this config group, else hide this config group. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')
          items:                                         # This will be followed by all your config items/UI elements for the given group (array, required)
                 
                                                         ## Customizable Core UI Elements ##
          - type: dropdownSelector                       # Select the insert strategy for multisource nodes. Leveraged by Coalesce default Node Types
            displayName: 'Multisource Strategy'          # Config element name (string, required) 
            attributeName: 'insertStrategy'              # Name of element used in templates (string, required)
            default: 'INSERT'                            # Default selection (string)
            options:                                     # Dropdown options (array of strings, required)
            - 'INSERT'
            - 'UNION'
            - 'UNION ALL'

            isRequired: false                            # If a config item is required (boolean, defaults false)
            enableIf: 'true'                             # If true, display this element, else hide this element. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')

          - type: toggleButton                           # Enable or disable truncate before running. Leveraged by Coalesce default Stage Node Type
            displayName: 'Truncate Before'               # GUI display name (string, required) 
            attributeName: 'truncateBefore'              # Name of element used in templates (string, required)
            enableIf: 'true'                             # If true, display this element, else hide this element. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')
            
          - type: toggleButton                           # Enable tests to be run. Leveraged by Coalesce default Node Types
            displayName: 'Enable Tests'                  # GUI display name (string, required) 
            attributeName: 'testsEnabled'                # Name of element used in templates (string, required)
            default: true                                # Element default state (boolean)
            enableIf: 'true'                             # If true, display this element, else hide this element. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')

          - type: textBox                                # SQL to be executed before run
            displayName: 'Pre-SQL'                       # GUI display name (string, required) 
            attributeName: 'preSQL'                      # Name of element used in templates (string, required)
            syntax: 'sql'                                # Syntax highlighting in text box (string, defaults 'none', 'none' | 'sql')
            isRequired: false                            # If a config item is required (boolean, defaults false)
            enableIf: 'true'                             # If true, display this element, else hide this element. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')

          - type: textBox                                # SQL to be executed after run
            displayName: 'Post-SQL'                      # GUI display name (string, required) 
            attributeName: 'postSQL'                     # Name of element used in templates (string, required)
            syntax: 'sql'                                # Syntax highlighting in text box (string, defaults 'none', 'none' | 'sql')
            isRequired: false                            # If a config item is required (boolean, defaults false)
            enableIf: 'true'                             # If true, display this element, else hide this element. 
                                                         # Jinja expression resulting in a quoted boolean may be used for dynamic behavior 
                                                         # (boolean string, 'true' | 'false', defaults 'true')

            
        systemColumns:                                   # Additional columns (rows in mapping grid) to initialize the node with (array of columns objects)
        - displayName: 'SYSTEM_COLUMN_1'                 # Column display name (string, required) 
                                                         # '{{NODE_NAME}}' token can be used in the displayName to reference the name of the current node
          attributeName: 'systemColumn1'                 # Name of element used in templates (string, required)
          transform: '1'                                 # Initialized transform value of system column (string, required)
          dataType: 'NUMBER'                             # SQL data type (string, required)
          placement: 'beginning'                         # Determines placement of system column in relation to normal columns.  (string, 'beginning' | 'end')

        mappingColumns:                                  # Adds additional columns to the mapping grid for additional metadata per node-column
        - type: textBox                                  # Generic textbox in mapping grid
          headerName: 'My Header'                        # GUI display name (string, required) 
          attributeName: 'myMappingColumn'               # Name of element used in templates (string, required)
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: "{{ node.override.create.script }}"
    name: Custom Procedure
    version: 1
  StepType-23:
    id: "23"
    isDisabled: false
    metadata:
      defaultStorageLocation: ODS
      error: null
      nodeMetadataSpec: |
        capitalized: Non-CDC
        short: ODS
        plural: Operational Data Stores
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create ODS Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

                {% if has_business_key %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "{{node.name}}"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns%}
                            {% if col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS "{{ col.name }}"
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS "{{ col.name }}"
                            {% else %}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} {{ node.name }} ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "{{ node.name }}"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "{{ node.name}}"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* Changed Rows */
                        SELECT
                        {% for col in source.columns %}
                            {% if col.name == 'DSS_RECORD_SOURCE' %}
                                "{{ node.name }}"."{{ col.name }}" AS "{{ col.name }}"
                            {% elif col.name == 'DSS_LOAD_DATE' %}
                                "{{ node.name }}"."{{ col.name }}" AS "{{ col.name }}"
                            {% elif col.name == 'DSS_CREATE_TIME' %}
                                "{{ node.name }}"."{{ col.name }}" AS "{{ col.name }}"
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS "{{ col.name }}"
                            {% else %}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} {{ node.name }} ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "{{ node.name }}"."{{ col.name }}"
                        {% endfor %}
                        EXCEPT
                        /* EXCEPT FOR EXISTING ROWS TO NOT PROCESS UNCHANGED ROWS*/
                        SELECT
                        {%- for col in source.columns %}
                            {% if col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS "{{ col.name }}"
                            {% else %}
                                "{{ node.name }}"."{{ col.name }}" AS "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor -%}
                        FROM {{ ref_no_link(node.location.name, node.name) }} {{ node.name}}
                        ) AS src
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            ON "{{node.name}}"."{{col.name}}" = src."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED THEN UPDATE
                        SET
                            {%- for col in source.columns %}
                                "{{ node.name }}"."{{ col.name }}" = src."{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor -%}
                        WHEN NOT MATCHED THEN INSERT
                        (
                            {%- for col in source.columns %}
                                "{{ node.name }}"."{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor -%}   
                        )
                        VALUES
                        (
                            {%- for col in source.columns %}
                                src."{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor -%}   
                        );
                    {% endfor %}
                {% endif %}
                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}
                        	
            {% endif %}

            {% if config.testsEnabled %}
                {% for test in node.tests %}
                    {% if test.runOrder == 'After' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% for column in columns %}
                    {% for test in column.tests %}
                        {{ test_stage(column.name + ": " + test.name) }}
                        {{ test.templateString }}
                    {% endfor %}
                {% endfor %}
            {% endif %}
    name: ODS - Non-CDC
    version: 1
  StepType-29:
    id: "29"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Stage DS 05 ID LAG
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            		{{ stage('Create Transient Table') }}
            		CREATE OR REPLACE TRANSIENT TABLE {{ ref_no_link(node.location.name, node.name+'_RFRSH_TSMP') }} AS
            		SELECT MAX("{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_LAG","")}}"."HVRCAPTSTAMP") AS "REFRESH_HVRCAPTSTAMP"
            		FROM {{ ref_no_link('ODS', node.name | replace("STG_DS","ODS") | replace("_05_ID_LAG","")) }} {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_LAG","")}}
            		JOIN {{ ref_no_link('ODS', 'ODS_CTRL_HVRCAPTSTAMP') }} ODS_CTRL_HVRCAPTSTAMP
            		ON {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_LAG","")}}."HVRCAPTUREKEY" = ODS_CTRL_HVRCAPTSTAMP."HVRCAPTUREKEY"
            		AND {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_LAG","")}}."HVRCAPTSTAMP" < ODS_CTRL_HVRCAPTSTAMP."HVRCAPTSTAMP"
            		WHERE "{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_LAG","")}}"."HVRTXSEQ" = ''
            		OR "{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_LAG","")}}"."HVROP" = 5
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT DISTINCT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage DS 05 ID LAG
    version: 1
  StepType-30:
    id: "30"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage DS 05 ID NEW
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            		{{ stage('Create Transient Table') }}
            		CREATE OR REPLACE TRANSIENT TABLE {{ ref_no_link(node.location.name, node.name+'_RFRSH_TSMP') }} AS
            		SELECT MAX("{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_NEW","")}}"."HVRCAPTSTAMP") AS "REFRESH_HVRCAPTSTAMP"
            		FROM {{ ref_no_link('ODS', node.name | replace("STG_DS","ODS") | replace("_05_ID_NEW","")) }} {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_NEW","")}}
            		JOIN {{ ref_no_link('ODS', 'ODS_CTRL_HVRCAPTSTAMP') }} ODS_CTRL_HVRCAPTSTAMP
            		ON {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_NEW","")}}."HVRCAPTUREKEY" = ODS_CTRL_HVRCAPTSTAMP."HVRCAPTUREKEY"
            		AND {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_NEW","")}}."HVRCAPTSTAMP" < ODS_CTRL_HVRCAPTSTAMP."HVRCAPTSTAMP"
            		WHERE "{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_NEW","")}}"."HVRTXSEQ" = ''
            		OR "{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_NEW","")}}"."HVROP" = 5
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT DISTINCT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage DS 05 ID NEW
    version: 1
  StepType-31:
    id: "31"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Stage DS 05 ID ODS
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            		{{ stage('Create Transient Table') }}
            		CREATE OR REPLACE TRANSIENT TABLE {{ ref_no_link(node.location.name, node.name+'_RFRSH_TSMP') }} AS
            		SELECT MAX("{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_ODS","")}}"."HVRCAPTSTAMP") AS "REFRESH_HVRCAPTSTAMP"
            		FROM {{ ref_no_link('ODS', node.name | replace("STG_DS","ODS") | replace("_05_ID_ODS","")) }} {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_ODS","")}}
            		JOIN {{ ref_no_link('ODS', 'ODS_CTRL_HVRCAPTSTAMP') }} ODS_CTRL_HVRCAPTSTAMP
            		ON {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_ODS","")}}."HVRCAPTUREKEY" = ODS_CTRL_HVRCAPTSTAMP."HVRCAPTUREKEY"
            		AND {{ node.name | replace("STG_DS","ODS") | replace("_05_ID_ODS","")}}."HVRCAPTSTAMP" < ODS_CTRL_HVRCAPTSTAMP."HVRCAPTSTAMP"
            		WHERE "{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_ODS","")}}"."HVRTXSEQ" = ''
            		OR "{{ node.name | replace("STG_DS","ODS") | replace("_05_ID_ODS","")}}"."HVROP" = 5
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT DISTINCT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage DS 05 ID ODS
    version: 1
  StepType-32:
    id: "32"
    isDisabled: false
    metadata:
      defaultStorageLocation: SBL
      error: null
      nodeMetadataSpec: |
        capitalized: SBL
        short: DS
        plural: SBLs
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          
          - type: changeTrackingColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_START_DATE
          transform: CAST(DATEADD(DAY, -1, "ODS_CTRL_EDW"."PROCESS_DATETIME_CURRENT") AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: DSS_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: DSS_CURRENT_FLAG
          transform: ''
          dataType: CHAR(1)
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: DSS_VERSION
          transform: ''
          dataType: INTEGER
          placement: end
          attributeName: isSystemVersion

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create SBL Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create SBL View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' %}
                                1
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% elif col.name == 'DSS_START_DATE' %}
                                CAST(DATEADD(DAY, -1, "ODS_CTRL_EDW"."PROCESS_DATETIME_CURRENT") AS TIMESTAMP)
                            {% elif col.name == 'DSS_END_DATE' %}
                                CAST('2999-12-31 00:00:00' AS TIMESTAMP)
                            {% elif col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% elif col.name == 'DSS_START_DATE' %}
                                CAST(DATEADD(DAY, -1, "ODS_CTRL_EDW"."PROCESS_DATETIME_CURRENT") AS TIMESTAMP)
                            {% elif col.name == 'DSS_END_DATE' %}
                                CAST('2999-12-31 00:00:00' AS TIMESTAMP)
                            {% elif col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_END_DATE' %}
                                DATEADD(MILLISECONDS, -1, CAST(DATEADD(DAY, -1, "ODS_CTRL_EDW"."PROCESS_DATETIME_CURRENT") AS TIMESTAMP))
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' or col.name == 'DSS_CREATE_TIME' or col.name == 'DSS_START_DATE' or col.name == 'DSS_END_DATE' %}
                                "DIM"."{{ col.name }}"
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.name == 'DSS_VERSION' or
                                                                col.name == 'DSS_CURRENT_FLAG' or
                                                                col.name == 'DSS_START_DATE' or
                                                                col.name == 'DSS_END_DATE' or
                                                                col.name == 'DSS_UPDATE_TIME' or
                                                                col.name == 'DSS_CREATE_TIME') -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    --AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    AND "TGT"."DSS_VERSION" = "SRC"."DSS_VERSION"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.name == 'DSS_CREATE_TIME') %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                    {% endfor %}
            	{% endif %}
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: SBL
    version: 1
  StepType-35:
    id: "35"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Curated Stage
        short: STG
        plural: Curated Stage Tabless
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Curated Stage
    version: 1
  StepType-36:
    id: "36"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATASTORE
      error: null
      nodeMetadataSpec: |
        capitalized: Curated Datastore
        short: DS
        plural: Datastores
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          
          - type: changeTrackingColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_START_DATE
          transform: CAST(TABLE.HVRCAPTSTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: DSS_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: DSS_CURRENT_FLAG
          transform: ''
          dataType: CHAR(1)
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: DSS_VERSION
          transform: ''
          dataType: INTEGER
          placement: end
          attributeName: isSystemVersion

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Curated Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Curated View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' %}
                                1
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% elif col.name == 'DSS_START_DATE' %}
                                CAST(DATEADD(DAY, -1, CURRENT_DATE) AS TIMESTAMP)
                            {% elif col.name == 'DSS_END_DATE' %}
                                CAST('2999-12-31 00:00:00' AS TIMESTAMP)
                            {% elif col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% elif col.name == 'DSS_START_DATE' %}
                                CAST(DATEADD(DAY, -1, CURRENT_DATE) AS TIMESTAMP)
                            {% elif col.name == 'DSS_END_DATE' %}
                                CAST('2999-12-31 00:00:00' AS TIMESTAMP)
                            {% elif col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_END_DATE' %}
                                DATEADD(MILLISECONDS, -1, CAST(DATEADD(DAY, -1, CAST('2999-12-31 00:00:00' AS TIMESTAMP)) AS TIMESTAMP))
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' or col.name == 'DSS_CREATE_TIME' or col.name == 'DSS_START_DATE' or col.name == 'DSS_END_DATE' %}
                                "DIM"."{{ col.name }}"
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.name == 'DSS_VERSION' or
                                                                col.name == 'DSS_CURRENT_FLAG' or
                                                                col.name == 'DSS_START_DATE' or
                                                                col.name == 'DSS_END_DATE' or
                                                                col.name == 'DSS_UPDATE_TIME' or
                                                                col.name == 'DSS_CREATE_TIME') -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    --AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    AND "TGT"."DSS_VERSION" = "SRC"."DSS_VERSION"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.name == 'DSS_CREATE_TIME') %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                    {% endfor %}
            	{% endif %}
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Curated Datastore
    version: 1
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Hidden
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
              - table
            isRequired: false  

        systemColumns:
          - displayName: 'HVRCAPTUREKEY'
            attributeName: 'HVRCAPTUREKEY'
            transform: ''
            nullable: false
            dataType: 'VARCHAR(50)'
            placement: 'end'
      templates:
        create:
          templateString: |+
            {{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TRANSIENT TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
            				{%- if col.name == 'HVRCAPTUREKEY' %}  "ODS_CTRL_HVRCAPTSTAMP"."{{ col.name}}" AS "{{ col.name }}"
            				{% else %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}" {% endif %}
            				
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
                    	
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Transient Stage
    version: 1
  StepType-44:
    id: "44"
    isDisabled: false
    metadata:
      defaultStorageLocation: LOAD
      error: null
      nodeMetadataSpec: |-
        capitalized: Load
        short: LOAD
        plural: Loads
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true
            
          - type: businessKeyColumns
            isRequired: false

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Load Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}

            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"		
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}

            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Load
    version: 1
  StepType-50:
    id: "50"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: External Table
        short: 'EXT'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        deployStrategy: advanced

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DW_DB_DEVC_S3_EXTERNAL_STAGE"
            options:
            - "DW_DB_DEVC_S3_EXTERNAL_STAGE"
            - "Create external stages on Snowflake"
            - "Place them in the same storage location"
            - "List the storage locations in this dropdown"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            - "XML"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Auto Refresh
            attributeName: autoRefresh
            type: toggleButton
            default: false
            isRequired: false

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{{ config.autoRefresh }}"
            default: "arn:aws:sns:us-east-1:121674918127:prod-emea-s3-notification"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
        - displayName: 'METADATA$FILENAME'
          attributeName: 'METADATA$FILENAME'
          transform: ''
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |-
            {% if desiredState is undefined %}
              {{ stage('Drop External Table') }}
              DROP EXTERNAL TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% else %}

            {{ stage('Create External Table') }}

            CREATE OR REPLACE EXTERNAL TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              {% if desiredState.config.fileType == "CSV" %}
                {% for col in desiredState.sources[0].columns if (col.name | upper != "VALUE" and col.name | upper != "METADATA$FILENAME") %}
                  {% if loop.first %}({% endif %}
                    "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
              {% endif %}
              
              with location = @{{ ref_no_link(desiredState.node.location.name) | replace('""', '"' + desiredState.config.fileLocation | upper + '"') }}
              pattern='{{ desiredState.config.filePattern }}'
              file_format = (type = {{ desiredState.config.fileType }}
              {% if desiredState.config.fileType == "CSV" %}
                {% if desiredState.config.recDelim != null %}record_delimiter = '{{ desiredState.config.recDelim }}'{% endif %}
                {% if desiredState.config.fieldDelim != null %}field_delimiter = '{{ desiredState.config.fieldDelim }}'{% endif %}
                {% if desiredState.config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ desiredState.config.fieldEnclosed }}'{% endif %}
                {% if desiredState.config.skipHeader != null %}skip_header = {{ desiredState.config.skipHeader }}{% endif %}
                {% if desiredState.config.skipBlankLines %}skip_blank_lines = {{ desiredState.config.skipBlankLines }}{% endif %}
                {% if desiredState.config.trimSpace %}trim_space = {{ desiredState.config.trimSpace }}{% endif %}
              {% endif %}
              )
              auto_refresh = {{ desiredState.config.autoRefresh }}
              {% if desiredState.config.autoRefresh and desiredState.config.snsTopic != null %}aws_sns_topic = '{{ desiredState.config.snsTopic }}'{% endif %}
              {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
            ;
            {% endif %}
        run:
          templateString: |-
            {% if config.autoRefresh is false %}
            {{ stage('Refresh External Table') }}
            ALTER EXTERNAL TABLE {{ ref_no_link(node.location.name, node.name) }} REFRESH
            {% endif %}
    name: External Table
    version: 1
  StepType-7:
    id: "7"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATASTORE
      error: null
      nodeMetadataSpec: |
        capitalized: DATASTORE
        short: DS
        plural: Datastores
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          
          - type: changeTrackingColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: DSS_START_DATE
          transform: CAST(TABLE.HVRCAPTSTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: DSS_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: DSS_CURRENT_FLAG
          transform: ''
          dataType: CHAR(1)
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: DSS_VERSION
          transform: ''
          dataType: INTEGER
          placement: end
          attributeName: isSystemVersion

        - displayName: DSS_CREATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: DSS_UPDATE_TIME
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Data Store Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' %}
                                1
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% elif col.name == 'DSS_START_DATE' %}
                                {% for col in source.columns %}
                                    {% if col.name == 'HVRCAPTSTAMP' %}
                                        CAST({{ get_source_transform(col) }} AS TIMESTAMP)
                                    {% endif %}
                                {% endfor %}
                            {% elif col.name == 'DSS_END_DATE' %}
                                CAST('2999-12-31 00:00:00' AS TIMESTAMP)
                            {% elif col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% elif col.name == 'DSS_START_DATE' %}
                                {% for col in source.columns%}
                                    {% if col.name == 'HVRCAPTSTAMP' %}
                                        CAST({{ get_source_transform(col) }} AS TIMESTAMP)
                                    {% endif %}
                                {% endfor %}
                            {% elif col.name == 'DSS_END_DATE' %}
                                CAST('2999-12-31 00:00:00' AS TIMESTAMP)
                            {% elif col.name == 'DSS_CREATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% elif col.name == 'DSS_UPDATE_TIME' %}
                                CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_END_DATE' %}
                                {% for col in source.columns%}
                                    {% if col.name == 'HVRCAPTSTAMP' %}
                                        DATEADD(MILLISECONDS, -1, CAST({{ get_source_transform(col) }} AS TIMESTAMP))
                                    {% endif %}
                                {% endfor %}
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.name == 'DSS_VERSION' or col.name == 'DSS_CREATE_TIME' or col.name == 'DSS_START_DATE' or col.name == 'DSS_END_DATE' %}
                                "DIM"."{{ col.name }}"
                            {% elif col.name == 'DSS_CURRENT_FLAG' %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        --WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        WHERE "DIM"."DSS_CURRENT_FLAG" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.name == 'DSS_VERSION' or
                                                                col.name == 'DSS_CURRENT_FLAG' or
                                                                col.name == 'DSS_START_DATE' or
                                                                col.name == 'DSS_END_DATE' or
                                                                col.name == 'DSS_UPDATE_TIME' or
                                                                col.name == 'DSS_CREATE_TIME') -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    --AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    AND "TGT"."DSS_VERSION" = "SRC"."DSS_VERSION"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.name == 'DSS_CREATE_TIME') %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                    {% endfor %}
            	{% endif %}
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Data Store
    version: 1
  StepType-9:
    id: "9"
    isDisabled: false
    metadata:
      defaultStorageLocation: DATASTORE_VIEW
      error: null
      nodeMetadataSpec: |
        capitalized: DATASTORE_VIEW
        short: DSV_
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: DatastoreViews

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |-
            {% if node.override.create.enabled %}
                            
                {{ node.override.create.script }}

                {% else %}
                    {{ stage('Create View') }}
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    ) as 
                    SELECT
                        {% for col in columns %}
                            {{sources[0].columns[0].sourceColumns[0].node.name}}.{{ col.name }}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    {{sources[0].join}}
            {% endif %}
        run:
          templateString: ""
    name: Data Store View
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-22:
    id: "22"
    name: CC_PROD
    steps:
      - "2200"
      - "2201"
      - "2202"
      - "2203"
      - "2204"
      - "2205"
      - "2206"
      - "2207"
      - "2208"
      - "2209"
      - "2210"
      - "2211"
      - "2212"
      - "2213"
      - "2214"
      - "2215"
      - "2216"
      - "2217"
      - "2218"
      - "2219"
      - "2220"
      - "2221"
      - "2222"
      - "2223"
      - "2224"
      - "2225"
      - "2226"
      - "2227"
      - "2228"
      - "2229"
      - "2230"
      - "2231"
      - "2232"
      - "2233"
      - "2234"
      - "2235"
      - "2236"
      - "2237"
      - "2238"
      - "2239"
      - "2240"
      - "2241"
      - "2242"
      - "2243"
      - "2244"
      - "2245"
      - "2246"
      - "2247"
      - "2248"
      - "2249"
      - "2250"
      - "2251"
      - "2252"
      - "2253"
      - "2254"
      - "2255"
      - "2256"
      - "2257"
      - "2258"
      - "2259"
      - "2260"
      - "2261"
      - "2262"
      - "2263"
      - "2264"
      - "2265"
      - "2266"
      - "2267"
      - "2268"
      - "2269"
      - "2270"
      - "2271"
      - "2272"
      - "2273"
      - "2274"
      - "2275"
      - "2276"
      - "2277"
      - "2278"
      - "2279"
      - "2280"
      - "2281"
      - "2282"
      - "2283"
      - "2284"
      - "2285"
      - "2286"
      - "2287"
      - "2288"
      - "2289"
      - "2290"
      - "2291"
      - "2292"
      - "2293"
      - "2294"
      - "2295"
      - "2296"
      - "2297"
      - "2298"
      - "2299"
      - "2300"
      - "2301"
      - "2302"
      - "2303"
      - "2304"
      - "2305"
      - "2306"
      - "2307"
      - "2308"
      - "2309"
      - "2310"
      - "2311"
      - "2312"
      - "2313"
      - "2314"
      - "2315"
      - "2316"
      - "2317"
      - "2318"
      - "2319"
      - "2320"
      - "2321"
      - "2322"
      - "2323"
      - "2326"
      - "2327"
      - "2328"
      - "2329"
      - "2330"
      - "2331"
      - "2332"
      - "2333"
      - "2334"
      - "2335"
      - "2336"
      - "2337"
      - "2338"
      - "2339"
      - "2340"
      - "2341"
      - "2342"
      - "2343"
      - "2344"
      - "2345"
      - "2346"
      - "2347"
      - "2348"
      - "2349"
      - "2350"
      - "2351"
      - "2352"
      - "2353"
      - "2354"
      - "2355"
      - "2356"
      - "2357"
      - "2358"
      - "2359"
      - "2360"
      - "2361"
      - "2362"
      - "2363"
      - "2364"
      - "2365"
      - "2366"
      - "2367"
      - "2368"
      - "2369"
      - "2370"
      - "2371"
      - "2372"
      - "2373"
      - "2374"
      - "2375"
      - "2376"
      - "2377"
      - "2378"
      - "2379"
      - "2380"
      - "2381"
      - "2382"
      - "2383"
      - "2384"
      - "2385"
      - "2386"
      - "2387"
      - "2388"
      - "2389"
      - "2390"
      - "2391"
      - "2392"
      - "2393"
      - "2394"
      - "2395"
      - "2396"
      - "2397"
      - "2398"
      - "2399"
      - "2400"
      - "2401"
      - "2402"
      - "2403"
      - "2404"
      - "2405"
      - "2406"
      - "2407"
      - "2408"
      - "2409"
      - "2410"
      - "2411"
      - "2412"
      - "2413"
      - "2414"
      - "2415"
      - "2416"
      - "2417"
      - "2418"
      - "2419"
      - "2420"
      - "2421"
      - "2422"
      - "2423"
      - "2424"
      - "2425"
      - "2426"
      - "2427"
      - "2428"
      - "2429"
      - "2430"
      - "2431"
      - "2432"
      - "2433"
      - "2434"
      - "2435"
      - "2436"
      - "2437"
      - "2438"
      - "2439"
      - "2440"
      - "2441"
      - "2442"
      - "2443"
      - "2444"
      - "2445"
      - "2446"
      - "2447"
      - "2448"
      - "2449"
      - "2450"
      - "2451"
      - "2452"
      - "2453"
      - "2454"
      - "2455"
      - "2456"
      - "2457"
      - "2458"
      - "2459"
      - "2460"
      - "2461"
      - "2462"
      - "2463"
      - "2464"
      - "2465"
      - "2466"
      - "2467"
      - "2468"
      - "2469"
      - "2470"
      - "2471"
      - "2472"
      - "2473"
      - "2474"
      - "2475"
      - "2476"
      - "2477"
      - "2478"
      - "2479"
      - "2480"
      - "2481"
      - "2482"
      - "2483"
      - "2484"
      - "2485"
      - "2486"
      - "2487"
      - "2488"
      - "2489"
      - "2490"
      - "2491"
      - "2492"
      - "2493"
      - "2494"
      - "2495"
      - "2496"
      - "2497"
      - "2498"
      - "2499"
      - "2500"
      - "2501"
      - "2502"
      - "2503"
      - "2504"
      - "2505"
      - "2506"
      - "2507"
      - "2508"
      - "2509"
      - "2510"
      - "2511"
      - "2512"
      - "2513"
      - "2514"
      - "2515"
      - "2516"
      - "2517"
      - "2518"
      - "2519"
      - "2520"
      - "2521"
      - "2522"
      - "2524"
      - "2525"
      - "2526"
      - "2527"
      - "2528"
      - "2529"
      - "2530"
      - "2531"
      - "2532"
      - "2533"
      - "2534"
      - "2535"
      - "2536"
      - "2537"
      - "2538"
      - "2539"
      - "2540"
      - "2541"
      - "2542"
      - "2543"
      - "2544"
      - "2545"
      - "2546"
      - "2547"
      - "2548"
      - "2549"
      - "2550"
      - "2551"
      - "2552"
      - "2553"
      - "2555"
      - "2556"
      - "2557"
      - "2558"
      - "2561"
      - "16275"
      - "16276"
      - "16277"
      - "16278"
      - "16279"
      - "16280"
      - "16281"
      - "16282"
      - "16283"
      - "16284"
      - "16285"
      - "16286"
      - "16287"
      - "16288"
      - "16289"
      - "16290"
      - "16291"
      - "16292"
      - "16293"
      - "16294"
      - "16295"
      - "16296"
      - "16297"
      - "16298"
      - "16299"
      - "16300"
      - "16301"
      - "16302"
      - "16303"
      - "16304"
      - "16305"
      - "16306"
      - "16307"
      - "16308"
      - "16309"
      - "16310"
      - "16311"
      - "16312"
      - "16313"
      - "16314"
      - "16315"
      - "16316"
      - "16317"
      - "16318"
      - "16319"
      - "16320"
      - "16321"
      - "16322"
      - "16323"
      - "16324"
      - "16325"
      - "16326"
      - "16327"
      - "16328"
      - "16329"
      - "16330"
      - "16331"
      - "16332"
      - "16333"
      - "16334"
      - "16335"
      - "16336"
      - "16337"
      - "16338"
      - "16339"
      - "16340"
      - "16341"
      - "16342"
      - "16343"
      - "16344"
      - "16345"
      - "16346"
      - "16347"
      - "16348"
      - "16349"
      - "16350"
      - "16351"
      - "16352"
      - "16353"
      - "16354"
      - "16355"
      - "16356"
      - "16357"
      - "16358"
      - "16359"
      - "16360"
      - "16361"
      - "16362"
      - "16363"
      - "16364"
      - "16365"
      - "16366"
      - "16367"
      - "16368"
      - "16369"
      - "16370"
      - "16371"
      - "16372"
      - "16373"
      - "16374"
      - "16675"
      - "16976"
      - "16977"
      - "16978"
      - "16979"
      - "16980"
      - "16981"
      - "16982"
      - "16983"
      - "16984"
      - "16985"
      - "16986"
      - "16987"
      - "16988"
      - "17028"
      - "17029"
      - "17118"
      - "17119"
      - "17120"
      - "17121"
      - "17122"
      - "17123"
      - "17124"
      - "17125"
      - "17126"
      - "17127"
      - "17128"
      - "17129"
      - "17130"
      - "17131"
      - "17132"
      - "17133"
      - "17134"
      - "17135"
      - "17136"
      - "17137"
      - "17138"
      - "17139"
      - "17140"
      - "17141"
      - "17142"
      - "17143"
      - "17144"
      - "17145"
      - "17146"
      - "17147"
      - "17148"
      - "17149"
      - "17150"
      - "17151"
      - "17152"
      - "17153"
      - "17154"
      - "17155"
      - "17156"
      - "17157"
      - "17158"
      - "17159"
      - "17160"
      - "17161"
      - "17162"
      - "17163"
      - "17164"
      - "17165"
      - "17166"
      - "17167"
      - "17168"
      - "17169"
      - "17170"
      - "17171"
      - "17172"
      - "17173"
      - "17174"
      - "17175"
      - "17176"
      - "17177"
      - "17178"
      - "17179"
      - "17180"
      - "17181"
      - "17182"
      - "17183"
      - "17184"
      - "17185"
      - "17186"
      - "17187"
      - "17188"
      - "17189"
      - "17190"
      - "17191"
      - "17192"
      - "17193"
      - "17194"
      - "17195"
      - "17196"
      - "17197"
      - "17198"
      - "17199"
      - "17200"
      - "17201"
      - "17202"
      - "17203"
      - "17204"
      - "17205"
      - "17206"
      - "17207"
      - "17208"
      - "17209"
      - "17210"
      - "17211"
      - "17212"
      - "17213"
      - "17214"
      - "17215"
      - "17216"
      - "17217"
      - "17218"
      - "17219"
      - "17220"
      - "17221"
      - "17222"
      - "17223"
      - "17224"
      - "17225"
      - "17226"
      - "17227"
      - "17228"
      - "17229"
      - "17230"
      - "17231"
      - "17232"
      - "17233"
      - "17234"
      - "17235"
      - "17236"
      - "17237"
      - "17238"
      - "17239"
      - "17240"
      - "17241"
      - "17242"
      - "17243"
      - "17244"
      - "17245"
      - "17246"
      - "17247"
      - "17248"
      - "17249"
      - "17250"
      - "17251"
      - "17252"
      - "17253"
      - "17254"
      - "17255"
      - "17256"
      - "17257"
      - "17258"
      - "17259"
      - "17260"
      - "17261"
      - "17262"
      - "17263"
      - "17264"
      - "17265"
      - "17266"
      - "17267"
      - "17268"
      - "17269"
      - "17270"
      - "17271"
      - "17272"
      - "17273"
      - "17274"
      - "17275"
      - "17276"
      - "17277"
      - "17278"
      - "17279"
      - "17280"
      - "17281"
      - "17282"
      - "17283"
      - "17284"
      - "17285"
      - "17286"
      - "17287"
      - "17288"
      - "17289"
      - "17290"
      - "17291"
      - "17292"
      - "17293"
      - "17294"
      - "17295"
      - "17296"
      - "17297"
      - "17298"
      - "17299"
      - "17300"
      - "17301"
      - "17302"
      - "17303"
      - "17304"
      - "17305"
      - "17306"
      - "17307"
      - "17308"
      - "17309"
      - "17310"
      - "17311"
      - "17312"
      - "17313"
      - "17314"
      - "17315"
      - "17316"
      - "17317"
      - "17318"
      - "17319"
      - "17320"
      - "17321"
      - "17322"
      - "17323"
      - "17324"
      - "17325"
      - "17326"
      - "17327"
      - "17328"
      - "17329"
      - "17330"
      - "17331"
      - "17332"
      - "17333"
      - "17334"
      - "17335"
      - "17336"
      - "17337"
      - "17338"
      - "17339"
      - "17340"
      - "17341"
      - "17342"
      - "17343"
      - "17344"
      - "17345"
      - "17346"
      - "17347"
      - "17348"
      - "17349"
      - "17350"
      - "17351"
      - "17352"
      - "17353"
      - "17354"
      - "17355"
      - "17356"
      - "17357"
      - "17358"
      - "17359"
      - "17360"
      - "17361"
      - "17362"
      - "17363"
      - "17909"
      - "17910"
      - "17911"
      - "17912"
      - "17913"
      - "17914"
      - "17915"
      - "17916"
      - "17917"
      - "17918"
      - "17919"
      - "17920"
      - "17921"
      - "17922"
      - "17923"
      - "17924"
      - "17925"
      - "17926"
      - "17927"
      - "17928"
      - "17929"
      - "17930"
      - "17931"
      - "17932"
      - "17933"
      - "17934"
      - "17935"
      - "17936"
      - "17937"
      - "17938"
      - "17939"
      - "17940"
      - "17941"
      - "17942"
      - "17943"
      - "17944"
      - "17945"
      - "17946"
      - "17947"
      - "17948"
      - "17949"
      - "17950"
      - "17951"
      - "17952"
      - "17953"
      - "17954"
      - "17955"
      - "17956"
      - "17957"
      - "17958"
      - "17959"
      - "17960"
      - "17961"
      - "17962"
      - "17963"
      - "17964"
      - "17965"
      - "17966"
      - "17967"
      - "17968"
      - "17969"
      - "17970"
      - "17971"
      - "17972"
      - "17973"
      - "17974"
      - "17975"
      - "17976"
      - "17977"
      - "18084"
      - "18085"
      - "18086"
      - "18087"
      - "18088"
      - "18089"
      - "18090"
      - "18091"
      - "18092"
      - "18093"
      - "18094"
      - "18095"
      - "18096"
      - "18097"
      - "18098"
      - "18099"
      - "18100"
      - "18101"
      - "18102"
      - "18103"
      - "18104"
      - "18105"
      - "18106"
      - "18107"
      - "18108"
      - "18109"
      - "18110"
      - "18111"
      - "18112"
      - "18113"
      - "18114"
      - "18115"
      - "18116"
      - "18117"
      - "18118"
      - "18119"
      - "18120"
      - "18121"
      - "18122"
      - "18123"
      - "18124"
      - "18125"
      - "18126"
      - "18127"
      - "18128"
      - "18129"
      - "18130"
      - "18131"
      - "18132"
      - "18133"
      - "18134"
      - "18135"
      - "18136"
      - "18137"
      - "18138"
      - "18139"
      - "18140"
      - "18141"
      - "18142"
      - "18143"
      - "18144"
      - "18145"
      - "18146"
      - "18147"
      - "18148"
      - "18149"
      - "18150"
      - "18151"
      - "18152"
      - "18153"
      - "18154"
      - "18155"
      - "18156"
      - "18157"
      - "18158"
      - "18159"
      - "18160"
      - "18161"
      - "18162"
      - "18163"
      - "18164"
      - "18165"
      - "18166"
      - "18167"
      - "18168"
      - "18169"
      - "18170"
      - "18171"
      - "18172"
      - "18173"
      - "18174"
      - "18175"
      - "18176"
      - "18177"
      - "18178"
      - "18179"
      - "18180"
      - "18181"
      - "18182"
      - "18183"
      - "18184"
      - "18185"
      - "18186"
      - "18187"
      - "18188"
      - "18189"
      - "18190"
      - "18191"
      - "18192"
      - "18193"
      - "18194"
      - "18195"
      - "18196"
      - "18197"
      - "18198"
      - "18199"
      - "18200"
      - "18201"
      - "18202"
      - "18203"
      - "18204"
      - "18205"
      - "18206"
      - "18207"
      - "18208"
      - "18209"
      - "18210"
      - "18211"
      - "18212"
      - "18213"
      - "18214"
      - "18215"
      - "18216"
      - "18217"
      - "18218"
      - "18219"
      - "18220"
      - "18221"
      - "18222"
      - "18223"
      - "18224"
      - "18225"
      - "18226"
      - "18227"
      - "18228"
      - "18229"
      - "18230"
      - "18231"
      - "18232"
      - "18233"
      - "18234"
      - "18235"
      - "18236"
      - "18237"
      - "18238"
      - "18239"
      - "18240"
      - "18241"
      - "18242"
      - "18243"
      - "18244"
      - "18245"
      - "18246"
      - "18247"
      - "18248"
      - "18249"
      - "18250"
      - "18251"
      - "18252"
      - "18253"
      - "18254"
      - "18255"
      - "18256"
      - "18257"
      - "18258"
      - "18259"
      - "18260"
      - "18261"
      - "18262"
      - "18263"
      - "18264"
      - "18265"
      - "18266"
      - "18267"
      - "18268"
      - "18269"
      - "18270"
      - "18271"
      - "18272"
      - "18273"
      - "18274"
      - "18275"
      - "18276"
      - "18277"
      - "18278"
      - "18279"
      - "18280"
      - "18281"
      - "18282"
      - "18283"
      - "18284"
      - "18285"
      - "18286"
      - "18287"
      - "18288"
      - "18289"
      - "18290"
      - "18291"
      - "18292"
      - "18293"
      - "18294"
      - "18295"
      - "18296"
      - "18297"
      - "18298"
      - "18299"
      - "18300"
      - "18301"
      - "18302"
      - "18303"
      - "18304"
      - "18305"
      - "18306"
      - "18307"
      - "18308"
      - "18309"
      - "18310"
      - "18311"
      - "18312"
      - "18313"
      - "18314"
      - "18315"
      - "18316"
      - "18317"
      - "18318"
      - "18319"
      - "18320"
      - "18321"
      - "18322"
      - "18323"
      - "18324"
      - "18325"
      - "18326"
      - "18327"
      - "18328"
      - "18329"
      - "18330"
      - "18331"
      - "18332"
      - "18333"
      - "18334"
      - "18335"
      - "18336"
      - "18337"
      - "18338"
      - "18339"
      - "18340"
      - "18341"
      - "18342"
      - "18343"
      - "18344"
      - "18345"
      - "18346"
      - "18347"
      - "18348"
      - "18349"
      - "18350"
      - "18351"
      - "18352"
      - "18353"
      - "18354"
      - "18355"
      - "18356"
      - "18357"
      - "18358"
      - "18359"
      - "18360"
      - "18361"
      - "18362"
      - "18363"
      - "18364"
      - "18365"
      - "18366"
      - "18367"
      - "18368"
      - "18369"
      - "18370"
      - "18371"
      - "18372"
      - "18373"
      - "18374"
      - "18375"
      - "18376"
      - "18377"
      - "18378"
      - "18379"
      - "18380"
      - "18381"
      - "18382"
      - "18383"
      - "18384"
      - "18385"
      - "18386"
      - "18387"
      - "18388"
      - "18389"
      - "18390"
      - "18391"
      - "18392"
      - "18393"
      - "18394"
      - "18395"
      - "18396"
      - "18397"
      - "18398"
      - "18399"
      - "18400"
      - "18401"
      - "18402"
      - "18403"
      - "18404"
      - "18405"
      - "18406"
      - "18407"
      - "18408"
      - "18409"
      - "18410"
      - "18411"
      - "18412"
      - "18413"
      - "18414"
      - "18415"
      - "18416"
      - "18417"
      - "18418"
      - "18419"
      - "18420"
      - "18421"
      - "18422"
      - "18423"
      - "18424"
      - "18425"
      - "18426"
      - "18427"
      - "18428"
      - "18429"
      - "18430"
      - "18431"
      - "18432"
      - "18433"
      - "18434"
      - "18435"
      - "18436"
      - "18437"
      - "18438"
      - "18439"
      - "18440"
      - "18441"
      - "18442"
      - "18443"
      - "18444"
      - "18445"
      - "18446"
      - "18447"
      - "18448"
      - "18449"
      - "18450"
      - "18451"
      - "18452"
      - "18453"
      - "18454"
      - "18455"
      - "18456"
      - "18457"
      - "18458"
      - "18459"
      - "18460"
      - "18461"
      - "18462"
      - "18463"
      - "18464"
      - "18465"
      - "18466"
      - "18467"
      - "18468"
      - "18469"
      - "18470"
      - "18471"
      - "18472"
      - "18473"
      - "18474"
      - "18475"
      - "18476"
      - "18477"
      - "18478"
      - "18479"
      - "18480"
      - "18481"
      - "18482"
      - "18483"
      - "18484"
      - "18485"
      - "18486"
      - "18487"
      - "18488"
      - "18489"
      - "18490"
      - "18491"
      - "18492"
      - "18493"
      - "18494"
      - "18495"
      - "18496"
      - "18497"
      - "18498"
      - "18499"
      - "18500"
      - "18501"
      - "18502"
      - "18503"
      - "18504"
      - "18505"
      - "18506"
      - "18507"
      - "18508"
      - "18509"
      - "18510"
      - "18511"
      - "18512"
      - "18513"
      - "18514"
      - "18515"
      - "18516"
      - "18517"
      - "18518"
      - "18519"
      - "18520"
      - "18521"
      - "18522"
      - "18523"
      - "18524"
      - "18525"
      - "18526"
      - "18527"
      - "18528"
      - "18529"
      - "18530"
      - "18531"
      - "18532"
      - "18533"
      - "18534"
      - "18535"
      - "18536"
      - "18537"
      - "18538"
      - "18539"
      - "18540"
      - "18541"
      - "18542"
      - "18543"
      - "18544"
      - "18545"
      - "18546"
      - "18547"
      - "18548"
      - "18549"
      - "18550"
      - "18551"
      - "18552"
      - "18553"
      - "18554"
      - "18555"
      - "18556"
      - "18557"
      - "18558"
      - "18559"
      - "18560"
      - "18561"
      - "18562"
      - "18563"
      - "18564"
      - "18565"
      - "18566"
      - "18567"
      - "18568"
      - "18569"
      - "18570"
      - "18571"
      - "18572"
      - "18573"
      - "18574"
      - "18575"
      - "18576"
      - "18577"
      - "18578"
      - "18579"
      - "18580"
      - "18581"
      - "18582"
      - "18583"
      - "18584"
      - "18585"
      - "18586"
      - "18587"
      - "18588"
      - "18589"
      - "18590"
      - "18591"
      - "18592"
      - "18593"
      - "18594"
      - "18595"
      - "18596"
      - "18597"
      - "18598"
      - "18599"
      - "18600"
      - "18601"
      - "18602"
      - "18603"
      - "18604"
      - "18605"
      - "18606"
      - "18607"
      - "18608"
      - "18609"
      - "18610"
      - "18611"
      - "200008584"
      - "200008585"
      - "200008587"
      - "200008589"
      - "200008592"
      - "200008596"
      - "200008597"
      - "200008598"
      - "200008599"
      - "200008600"
      - "200008601"
      - "200008602"
      - "200008603"
      - "200008604"
      - "200009096"
      - "200009097"
      - "200009745"
      - "200009758"
      - "200009760"
      - "200009761"
      - "200009763"
      - "200009980"
      - "200010081"
      - "200010082"
      - "200010083"
      - "200010084"
      - "200010185"
      - "200010186"
      - "200010187"
      - "200010188"
      - "200010189"
      - "200010255"
      - "200010256"
      - "200010257"
      - "200010258"
      - "200010259"
      - "200010260"
      - "200010261"
      - "200010262"
      - "200010263"
      - "200010264"
      - "200010269"
      - "200010274"
      - "200010275"
      - "200010276"
      - "200010278"
      - "200010349"
      - "200010350"
      - "200010351"
      - "200010353"
      - "200010357"
      - "200010358"
      - "200010532"
      - "200010533"
      - "200010535"
      - "200010536"
      - "200010537"
      - "200010538"
      - "200010539"
      - "200010540"
      - "200010542"
      - "200010543"
      - "200010643"
      - "200010645"
      - "200010649"
      - "200010653"
      - "200010655"
      - "200010839"
      - "200010840"
      - "200010841"
      - "200010842"
      - "200011066"
      - "200011095"
      - "200012853"
      - "200012854"
      - "200012855"
      - "200012856"
      - "200012857"
      - "200012858"
      - "200012859"
      - "200012860"
      - "200013743"
      - "200013744"
      - "200013745"
      - "200013747"
      - "200013748"
      - "200014876"
      - "200015026"
      - "200015027"
      - "200015028"
      - "200015029"
      - "200015030"
      - "200015031"
      - "200015156"
      - "200015157"
      - "200015184"
      - "200015330"
      - "200015331"
      - "200015332"
      - "200015333"
      - "200016659"
      - "200016661"
      - "200016662"
      - "200016663"
      - "200016664"
      - "200016666"
      - "200016667"
      - "200016668"
      - "200016669"
      - "200016670"
      - "200016672"
      - "200016674"
      - "200016675"
      - "200016676"
      - "200016677"
      - "200016678"
      - "200016679"
      - "200016680"
      - "200016681"
      - "200016682"
      - "200016683"
      - "200016684"
      - "200016731"
      - "200016732"
      - "200016733"
      - "200016734"
      - "200016735"
      - "200016736"
      - "200016737"
      - "200016738"
      - "200016739"
      - "200016740"
      - "200016741"
      - "200016742"
      - "200016743"
      - "200016744"
      - "200016745"
      - "200016746"
      - "200016747"
      - "200016748"
      - "200016749"
      - "200016750"
      - "200016752"
      - "200016753"
      - "200016754"
      - "200016755"
      - "200016756"
      - "200016757"
      - "200016758"
      - "200016759"
      - "200016760"
      - "200016761"
      - "200016762"
      - "200016763"
      - "200016764"
      - "200016765"
      - "200016766"
      - "200016767"
      - "200016768"
      - "200016769"
      - "200016770"
      - "200016771"
      - "200016772"
      - "200016773"
      - "200016774"
      - "200016775"
      - "200016776"
      - "200016780"
      - "200016781"
      - "200016782"
      - "200016785"
      - "200016786"
      - "200016787"
      - "200016788"
      - "200016789"
      - "200016790"
      - "200016791"
      - "200016792"
      - "200016793"
      - "200016794"
      - "200016795"
      - "200016796"
      - "200016797"
      - "200016798"
      - "200016799"
      - "200016800"
      - "200016801"
      - "200016806"
      - "200016807"
      - "200016808"
      - "200016809"
      - "200016810"
      - "200016811"
      - "200016812"
      - "200016813"
      - "200016814"
      - "200016815"
      - "200016816"
      - "200016817"
      - "200016818"
      - "200016819"
      - "200016820"
      - "200016821"
      - "200016822"
      - "200016824"
      - "200016826"
      - "200016827"
      - "200016828"
      - "200016831"
      - "200016835"
      - "200016836"
      - "200016845"
      - "200016849"
      - "200016850"
      - "200016851"
      - "200016852"
      - "200016853"
      - "200016854"
      - "200016855"
      - "200016856"
      - "200016857"
      - "200016859"
      - "200016860"
      - "200016861"
      - "200016862"
      - "200016864"
      - "200016868"
      - "200016869"
      - "200016870"
      - "200016871"
      - "200016873"
      - "200016874"
      - "200016875"
      - "200016876"
      - "200016877"
      - "200016878"
      - "200016879"
      - "200016880"
      - "200016881"
      - "200016882"
      - "200016883"
      - "200016884"
      - "200016885"
      - "200016886"
      - "200016887"
      - "200016888"
      - "200016889"
      - "200016890"
      - "200016891"
      - "200016893"
      - "200016894"
      - "200016895"
      - "200016897"
      - "200016898"
      - "200016899"
      - "200016900"
      - "200016901"
      - "200016902"
      - "200016903"
      - "200016904"
      - "200016905"
      - "200016906"
      - "200016907"
      - "200016908"
      - "200016909"
      - "200016910"
      - "200016911"
      - "200016912"
      - "200016914"
      - "200016915"
      - "200016916"
      - "200016917"
      - "200016919"
      - "200016920"
      - "200016921"
      - "200016924"
      - "200016925"
      - "200016926"
      - "200016927"
      - "200016928"
      - "200016929"
      - "200016934"
      - "200016935"
      - "200019319"
      - "200019320"
      - "200019321"
      - "200019322"
      - "200019323"
      - "200019324"
      - "200019325"
      - "200022922"
      - "200022923"
      - "200022924"
      - "200022925"
      - "200022926"
      - "200022927"
      - "200023743"
      - "200023744"
      - "200023745"
      - "200023746"
      - "200023747"
      - "200023748"
      - "200023749"
      - "200023750"
      - "200023751"
      - "200023752"
      - "200024001"
      - "200024478"
      - "200024523"
      - "200025238"
      - "200025239"
      - "200025240"
      - "200025241"
      - "200025242"
      - "200025243"
      - "200025244"
      - "200025642"
      - "200031806"
      - "200033860"
      - "200033861"
      - "200033862"
      - "200033863"
      - "200033864"
      - "200033865"
      - "200033866"
      - "200033867"
      - "200033868"
      - "200033869"
      - "200033870"
      - "200033871"
      - "200033872"
      - "200033873"
      - "200033874"
      - "200033875"
      - "200033876"
      - "200033877"
      - "200033878"
      - "200033879"
      - "200033880"
      - "200033881"
      - "200033882"
      - "200033883"
      - "200033884"
      - "200033885"
      - "200033886"
      - "200033887"
      - "200033888"
      - "200033889"
      - "200033890"
      - "200033891"
      - "200033892"
      - "200033893"
      - "200033894"
      - "200033895"
      - "200033896"
      - "200033897"
      - "200033898"
      - "200033899"
      - "200033900"
      - "200033901"
      - "200033902"
      - "200033903"
      - "200033904"
      - "200033905"
      - "200033906"
      - "200033907"
      - "200033908"
      - "200033909"
      - "200033910"
      - "200033911"
      - "200033912"
      - "200033913"
      - "200033914"
      - "200033915"
      - "200033916"
      - "200033917"
      - "200033918"
      - "200033919"
      - "200033920"
      - "200033921"
      - "200033922"
      - "200033923"
      - "200033924"
      - "200033925"
      - "200033926"
      - "200033927"
      - "200033928"
      - "200033929"
      - "200033930"
      - "200033931"
      - "200033932"
      - "200033933"
      - "200033934"
      - "200033935"
      - "200033936"
      - "200033937"
      - "200033938"
      - "200033939"
      - "200033940"
      - "200033941"
      - "200033942"
      - "200033943"
      - "200033944"
      - "200033945"
      - "200033946"
      - "200033947"
      - "200033948"
      - "200033949"
      - "200033950"
      - "200033951"
      - "200033952"
      - "200033954"
      - "200008731"
      - "200008738"
      - "200008740"
      - "200008742"
      - "200008744"
      - "200009091"
      - "200009624"
      - "200009626"
      - "200009764"
      - "200009766"
      - "200009768"
      - "200009770"
      - "200009772"
      - "200009909"
      - "200009911"
      - "200009913"
      - "200009915"
      - "200009917"
      - "200009919"
      - "200009921"
      - "200009923"
      - "200009982"
      - "200010085"
      - "200010087"
      - "200010089"
      - "200010091"
      - "200010190"
      - "200010192"
      - "200010194"
      - "200010196"
      - "200010198"
      - "200010265"
      - "200010267"
      - "200010271"
      - "200010277"
      - "200010280"
      - "200010313"
      - "200010326"
      - "200010328"
      - "200010331"
      - "200010333"
      - "200010354"
      - "200010359"
      - "200010363"
      - "200010369"
      - "200010370"
      - "200010372"
      - "200010377"
      - "200010379"
      - "200010383"
      - "200010403"
      - "200010412"
      - "200010590"
      - "200010598"
      - "200010607"
      - "200010612"
      - "200010661"
      - "200010672"
      - "200010676"
      - "200010681"
      - "200010711"
      - "200010791"
      - "200010864"
      - "200010866"
      - "200010868"
      - "200010870"
      - "200010904"
      - "200010907"
      - "200010910"
      - "200010913"
      - "200010916"
      - "200011068"
      - "200011096"
      - "200012900"
      - "200012926"
      - "200012969"
      - "200013015"
      - "200013032"
      - "200013058"
      - "200013089"
      - "200013114"
      - "200013749"
      - "200013750"
      - "200013751"
      - "200013814"
      - "200013822"
      - "200014877"
      - "200015032"
      - "200015034"
      - "200015036"
      - "200015071"
      - "200015073"
      - "200015075"
      - "200015158"
      - "200015159"
      - "200015185"
      - "200015334"
      - "200015335"
      - "200015336"
      - "200015337"
      - "200017454"
      - "200017456"
      - "200017458"
      - "200017472"
      - "200017484"
      - "200017501"
      - "200017515"
      - "200017521"
      - "200017527"
      - "200017531"
      - "200017532"
      - "200017545"
      - "200017557"
      - "200017563"
      - "200017569"
      - "200017570"
      - "200017619"
      - "200017623"
      - "200017624"
      - "200017625"
      - "200017627"
      - "200017628"
      - "200017629"
      - "200017630"
      - "200017632"
      - "200017635"
      - "200017636"
      - "200017637"
      - "200017638"
      - "200017639"
      - "200017647"
      - "200017667"
      - "200017669"
      - "200017671"
      - "200017673"
      - "200017675"
      - "200017678"
      - "200017682"
      - "200017684"
      - "200017686"
      - "200017688"
      - "200017690"
      - "200017694"
      - "200017696"
      - "200017698"
      - "200017772"
      - "200017773"
      - "200017776"
      - "200017777"
      - "200017778"
      - "200017779"
      - "200017780"
      - "200017781"
      - "200017782"
      - "200017783"
      - "200017784"
      - "200017785"
      - "200017786"
      - "200017787"
      - "200017790"
      - "200017791"
      - "200017792"
      - "200017793"
      - "200017802"
      - "200018043"
      - "200018061"
      - "200018063"
      - "200018065"
      - "200018067"
      - "200018069"
      - "200018071"
      - "200018073"
      - "200018074"
      - "200018076"
      - "200018077"
      - "200018078"
      - "200018081"
      - "200018082"
      - "200018083"
      - "200018085"
      - "200018086"
      - "200018087"
      - "200018088"
      - "200018089"
      - "200018090"
      - "200018091"
      - "200018092"
      - "200018093"
      - "200018095"
      - "200018097"
      - "200018099"
      - "200018101"
      - "200018104"
      - "200018294"
      - "200018305"
      - "200018306"
      - "200018307"
      - "200018308"
      - "200018309"
      - "200018310"
      - "200018311"
      - "200018312"
      - "200018313"
      - "200018314"
      - "200018315"
      - "200018316"
      - "200018318"
      - "200018319"
      - "200018320"
      - "200018321"
      - "200018322"
      - "200018323"
      - "200018324"
      - "200018406"
      - "200018408"
      - "200018430"
      - "200018432"
      - "200018436"
      - "200018438"
      - "200018445"
      - "200018447"
      - "200018449"
      - "200018451"
      - "200018453"
      - "200018455"
      - "200018459"
      - "200018463"
      - "200018465"
      - "200018467"
      - "200018469"
      - "200018471"
      - "200018891"
      - "200018893"
      - "200018894"
      - "200018895"
      - "200018897"
      - "200018898"
      - "200018899"
      - "200018900"
      - "200018901"
      - "200018902"
      - "200018903"
      - "200018904"
      - "200018905"
      - "200018906"
      - "200018907"
      - "200018908"
      - "200018910"
      - "200018911"
      - "200018912"
      - "200018913"
      - "200018914"
      - "200018958"
      - "200018959"
      - "200018962"
      - "200018963"
      - "200018964"
      - "200018965"
      - "200018966"
      - "200018967"
      - "200018968"
      - "200018969"
      - "200018970"
      - "200018971"
      - "200018972"
      - "200018973"
      - "200018974"
      - "200018975"
      - "200018976"
      - "200019000"
      - "200019190"
      - "200019191"
      - "200019192"
      - "200019195"
      - "200019200"
      - "200019201"
      - "200019202"
      - "200019203"
      - "200019204"
      - "200019205"
      - "200019206"
      - "200019207"
      - "200019208"
      - "200019335"
      - "200019336"
      - "200019337"
      - "200019338"
      - "200019339"
      - "200019340"
      - "200019341"
      - "200022928"
      - "200022929"
      - "200022930"
      - "200023083"
      - "200023085"
      - "200023086"
      - "200023756"
      - "200023757"
      - "200023758"
      - "200023759"
      - "200023760"
      - "200023761"
      - "200023762"
      - "200023763"
      - "200023764"
      - "200023765"
      - "200024003"
      - "200024479"
      - "200024524"
      - "200025252"
      - "200025253"
      - "200025254"
      - "200025255"
      - "200025256"
      - "200025257"
      - "200025258"
      - "200025643"
      - "200031807"
      - "200008746"
      - "200008748"
      - "200008750"
      - "200008752"
      - "200008754"
      - "200009098"
      - "200009628"
      - "200009630"
      - "200009774"
      - "200009776"
      - "200009778"
      - "200009780"
      - "200009782"
      - "200009956"
      - "200009958"
      - "200009960"
      - "200009962"
      - "200009964"
      - "200009966"
      - "200009968"
      - "200009970"
      - "200009984"
      - "200010093"
      - "200010095"
      - "200010097"
      - "200010099"
      - "200010220"
      - "200010222"
      - "200010224"
      - "200010226"
      - "200010228"
      - "200010303"
      - "200010305"
      - "200010307"
      - "200010309"
      - "200010311"
      - "200010380"
      - "200010391"
      - "200010397"
      - "200010398"
      - "200010401"
      - "200010405"
      - "200010407"
      - "200010410"
      - "200010413"
      - "200010417"
      - "200010477"
      - "200010479"
      - "200010481"
      - "200010483"
      - "200010485"
      - "200010487"
      - "200010665"
      - "200010669"
      - "200010674"
      - "200010678"
      - "200010739"
      - "200010741"
      - "200010743"
      - "200010745"
      - "200010747"
      - "200010793"
      - "200010877"
      - "200010888"
      - "200010890"
      - "200010892"
      - "200010945"
      - "200010947"
      - "200010949"
      - "200010952"
      - "200010955"
      - "200011070"
      - "200011098"
      - "200012921"
      - "200012938"
      - "200012993"
      - "200013024"
      - "200013042"
      - "200013060"
      - "200013093"
      - "200013118"
      - "200013768"
      - "200013770"
      - "200013772"
      - "200013824"
      - "200013825"
      - "200014883"
      - "200015050"
      - "200015052"
      - "200015054"
      - "200015077"
      - "200015078"
      - "200015079"
      - "200015170"
      - "200015172"
      - "200015187"
      - "200015358"
      - "200015360"
      - "200015362"
      - "200015364"
      - "200017460"
      - "200017464"
      - "200017468"
      - "200017474"
      - "200017486"
      - "200017500"
      - "200017517"
      - "200017523"
      - "200017529"
      - "200017533"
      - "200017534"
      - "200017546"
      - "200017558"
      - "200017564"
      - "200017571"
      - "200017572"
      - "200017643"
      - "200017644"
      - "200017645"
      - "200017648"
      - "200017649"
      - "200017651"
      - "200017652"
      - "200017654"
      - "200017657"
      - "200017658"
      - "200017659"
      - "200017663"
      - "200017665"
      - "200017699"
      - "200017771"
      - "200017804"
      - "200017850"
      - "200017856"
      - "200017857"
      - "200017859"
      - "200017860"
      - "200017862"
      - "200017863"
      - "200017864"
      - "200017865"
      - "200017866"
      - "200017868"
      - "200017869"
      - "200017870"
      - "200017871"
      - "200017873"
      - "200017874"
      - "200017875"
      - "200017876"
      - "200017877"
      - "200017880"
      - "200017882"
      - "200017883"
      - "200017884"
      - "200017886"
      - "200017890"
      - "200017896"
      - "200017903"
      - "200017910"
      - "200017914"
      - "200017918"
      - "200017923"
      - "200017925"
      - "200018045"
      - "200018118"
      - "200018120"
      - "200018122"
      - "200018125"
      - "200018126"
      - "200018128"
      - "200018129"
      - "200018130"
      - "200018133"
      - "200018134"
      - "200018135"
      - "200018137"
      - "200018138"
      - "200018139"
      - "200018140"
      - "200018141"
      - "200018142"
      - "200018143"
      - "200018144"
      - "200018230"
      - "200018232"
      - "200018234"
      - "200018236"
      - "200018238"
      - "200018240"
      - "200018242"
      - "200018244"
      - "200018246"
      - "200018301"
      - "200018325"
      - "200018326"
      - "200018327"
      - "200018328"
      - "200018329"
      - "200018330"
      - "200018331"
      - "200018332"
      - "200018333"
      - "200018334"
      - "200018335"
      - "200018336"
      - "200018338"
      - "200018339"
      - "200018340"
      - "200018341"
      - "200018342"
      - "200018343"
      - "200018344"
      - "200018441"
      - "200018473"
      - "200018475"
      - "200018477"
      - "200018479"
      - "200018483"
      - "200018485"
      - "200018487"
      - "200018489"
      - "200018490"
      - "200018491"
      - "200018492"
      - "200018494"
      - "200018496"
      - "200018497"
      - "200018498"
      - "200018499"
      - "200018500"
      - "200018915"
      - "200018916"
      - "200018917"
      - "200018925"
      - "200018928"
      - "200018930"
      - "200018932"
      - "200018933"
      - "200018935"
      - "200018936"
      - "200018938"
      - "200018940"
      - "200018941"
      - "200018943"
      - "200018944"
      - "200018946"
      - "200018949"
      - "200018951"
      - "200018952"
      - "200018953"
      - "200018955"
      - "200018980"
      - "200018981"
      - "200018984"
      - "200018985"
      - "200018986"
      - "200018987"
      - "200018988"
      - "200018989"
      - "200018990"
      - "200018991"
      - "200018992"
      - "200018993"
      - "200018994"
      - "200018995"
      - "200018996"
      - "200018997"
      - "200018998"
      - "200018999"
      - "200019209"
      - "200019210"
      - "200019211"
      - "200019214"
      - "200019219"
      - "200019220"
      - "200019221"
      - "200019222"
      - "200019223"
      - "200019224"
      - "200019225"
      - "200019226"
      - "200019227"
      - "200019378"
      - "200019379"
      - "200019380"
      - "200019381"
      - "200019382"
      - "200019383"
      - "200019384"
      - "200022934"
      - "200022935"
      - "200022936"
      - "200023111"
      - "200023112"
      - "200023113"
      - "200023845"
      - "200023846"
      - "200023847"
      - "200023848"
      - "200023849"
      - "200023850"
      - "200023851"
      - "200023852"
      - "200023853"
      - "200023854"
      - "200024009"
      - "200024485"
      - "200024530"
      - "200025294"
      - "200025296"
      - "200025298"
      - "200025300"
      - "200025302"
      - "200025304"
      - "200025306"
      - "200025649"
      - "200031813"
      - "200009925"
      - "200009927"
      - "200009929"
      - "200009931"
      - "200009934"
      - "200009936"
      - "200009938"
      - "200009940"
      - "200010200"
      - "200010202"
      - "200010204"
      - "200010206"
      - "200010208"
      - "200010282"
      - "200010284"
      - "200010286"
      - "200010289"
      - "200010291"
      - "200010352"
      - "200010361"
      - "200010364"
      - "200010367"
      - "200010373"
      - "200010425"
      - "200010437"
      - "200010457"
      - "200010459"
      - "200010461"
      - "200010463"
      - "200010625"
      - "200010631"
      - "200010633"
      - "200010635"
      - "200010718"
      - "200010721"
      - "200010723"
      - "200010725"
      - "200010727"
      - "200010919"
      - "200010921"
      - "200010923"
      - "200010925"
      - "200010927"
      - "200012917"
      - "200012931"
      - "200012983"
      - "200013018"
      - "200013034"
      - "200013755"
      - "200013757"
      - "200013759"
      - "200014879"
      - "200015038"
      - "200015040"
      - "200015042"
      - "200015162"
      - "200015164"
      - "200015342"
      - "200015344"
      - "200015346"
      - "200015348"
      - "200018297"
      - "200019349"
      - "200019351"
      - "200019353"
      - "200019355"
      - "200019357"
      - "200019359"
      - "200019361"
      - "200023098"
      - "200023099"
      - "200023100"
      - "200023802"
      - "200023803"
      - "200023804"
      - "200023805"
      - "200023806"
      - "200023807"
      - "200023808"
      - "200023809"
      - "200023810"
      - "200023811"
      - "200024005"
      - "200024481"
      - "200024526"
      - "200025266"
      - "200025267"
      - "200025268"
      - "200025269"
      - "200025270"
      - "200025271"
      - "200025272"
      - "200025645"
      - "200031809"
      - "200008756"
      - "200008758"
      - "200008760"
      - "200008762"
      - "200008766"
      - "200009148"
      - "200009632"
      - "200009634"
      - "200009784"
      - "200009786"
      - "200009788"
      - "200009790"
      - "200009792"
      - "200009942"
      - "200009944"
      - "200009946"
      - "200009948"
      - "200009949"
      - "200009950"
      - "200009952"
      - "200009954"
      - "200009986"
      - "200010101"
      - "200010103"
      - "200010105"
      - "200010107"
      - "200010210"
      - "200010212"
      - "200010214"
      - "200010216"
      - "200010218"
      - "200010293"
      - "200010295"
      - "200010297"
      - "200010299"
      - "200010301"
      - "200010382"
      - "200010387"
      - "200010389"
      - "200010392"
      - "200010394"
      - "200010423"
      - "200010426"
      - "200010429"
      - "200010432"
      - "200010435"
      - "200010465"
      - "200010467"
      - "200010469"
      - "200010471"
      - "200010473"
      - "200010475"
      - "200010646"
      - "200010652"
      - "200010659"
      - "200010662"
      - "200010729"
      - "200010731"
      - "200010733"
      - "200010735"
      - "200010737"
      - "200010795"
      - "200010894"
      - "200010896"
      - "200010898"
      - "200010902"
      - "200010929"
      - "200010931"
      - "200010936"
      - "200010938"
      - "200010943"
      - "200011072"
      - "200011100"
      - "200012919"
      - "200012934"
      - "200012987"
      - "200013021"
      - "200013040"
      - "200013062"
      - "200013097"
      - "200013139"
      - "200013761"
      - "200013762"
      - "200013763"
      - "200013828"
      - "200013830"
      - "200014881"
      - "200015044"
      - "200015046"
      - "200015048"
      - "200015083"
      - "200015085"
      - "200015087"
      - "200015166"
      - "200015168"
      - "200015189"
      - "200015350"
      - "200015352"
      - "200015354"
      - "200015356"
      - "200017462"
      - "200017466"
      - "200017470"
      - "200017476"
      - "200017493"
      - "200017504"
      - "200017519"
      - "200017525"
      - "200017535"
      - "200017537"
      - "200017539"
      - "200017547"
      - "200017559"
      - "200017566"
      - "200017575"
      - "200017577"
      - "200017700"
      - "200017712"
      - "200017739"
      - "200017742"
      - "200017746"
      - "200017747"
      - "200017748"
      - "200017750"
      - "200017752"
      - "200017755"
      - "200017756"
      - "200017757"
      - "200017759"
      - "200017814"
      - "200017815"
      - "200017931"
      - "200017940"
      - "200017948"
      - "200017950"
      - "200017953"
      - "200017956"
      - "200017958"
      - "200017961"
      - "200017966"
      - "200017968"
      - "200017970"
      - "200017973"
      - "200017975"
      - "200017980"
      - "200017983"
      - "200017997"
      - "200017998"
      - "200017999"
      - "200018000"
      - "200018001"
      - "200018002"
      - "200018003"
      - "200018004"
      - "200018005"
      - "200018006"
      - "200018007"
      - "200018008"
      - "200018009"
      - "200018010"
      - "200018011"
      - "200018012"
      - "200018013"
      - "200018014"
      - "200018047"
      - "200018149"
      - "200018150"
      - "200018152"
      - "200018153"
      - "200018154"
      - "200018157"
      - "200018158"
      - "200018159"
      - "200018160"
      - "200018161"
      - "200018162"
      - "200018163"
      - "200018164"
      - "200018165"
      - "200018166"
      - "200018167"
      - "200018260"
      - "200018262"
      - "200018264"
      - "200018266"
      - "200018268"
      - "200018270"
      - "200018272"
      - "200018274"
      - "200018276"
      - "200018278"
      - "200018280"
      - "200018282"
      - "200018299"
      - "200018345"
      - "200018346"
      - "200018347"
      - "200018348"
      - "200018349"
      - "200018350"
      - "200018351"
      - "200018352"
      - "200018353"
      - "200018354"
      - "200018355"
      - "200018356"
      - "200018358"
      - "200018359"
      - "200018360"
      - "200018362"
      - "200018363"
      - "200018364"
      - "200018365"
      - "200018443"
      - "200018513"
      - "200018515"
      - "200018517"
      - "200018519"
      - "200018523"
      - "200018525"
      - "200018527"
      - "200018529"
      - "200018531"
      - "200018533"
      - "200018535"
      - "200018541"
      - "200018543"
      - "200018545"
      - "200018547"
      - "200018549"
      - "200018551"
      - "200019058"
      - "200019059"
      - "200019060"
      - "200019061"
      - "200019063"
      - "200019064"
      - "200019065"
      - "200019067"
      - "200019068"
      - "200019069"
      - "200019070"
      - "200019071"
      - "200019072"
      - "200019073"
      - "200019074"
      - "200019076"
      - "200019077"
      - "200019078"
      - "200019079"
      - "200019080"
      - "200019081"
      - "200019129"
      - "200019131"
      - "200019136"
      - "200019138"
      - "200019140"
      - "200019142"
      - "200019144"
      - "200019146"
      - "200019148"
      - "200019150"
      - "200019152"
      - "200019154"
      - "200019156"
      - "200019158"
      - "200019160"
      - "200019162"
      - "200019164"
      - "200019166"
      - "200019247"
      - "200019248"
      - "200019250"
      - "200019256"
      - "200019267"
      - "200019269"
      - "200019272"
      - "200019274"
      - "200019275"
      - "200019277"
      - "200019278"
      - "200019282"
      - "200019284"
      - "200019363"
      - "200019365"
      - "200019367"
      - "200019370"
      - "200019372"
      - "200019374"
      - "200019376"
      - "200022952"
      - "200022954"
      - "200022957"
      - "200023105"
      - "200023107"
      - "200023109"
      - "200023823"
      - "200023824"
      - "200023826"
      - "200023827"
      - "200023828"
      - "200023829"
      - "200023830"
      - "200023831"
      - "200023832"
      - "200023836"
      - "200024007"
      - "200024483"
      - "200024528"
      - "200025280"
      - "200025282"
      - "200025284"
      - "200025286"
      - "200025288"
      - "200025290"
      - "200025292"
      - "200025647"
      - "200031811"
  Subgraph-23:
    id: "23"
    name: BC_PROD
    steps:
      - "6555"
      - "9567"
      - "9568"
      - "9569"
      - "9570"
      - "9571"
      - "9572"
      - "9573"
      - "9574"
      - "9575"
      - "9576"
      - "9577"
      - "9578"
      - "9579"
      - "9580"
      - "9581"
      - "9582"
      - "9583"
      - "9584"
      - "9585"
      - "9586"
      - "9587"
      - "9588"
      - "9589"
      - "9590"
      - "9591"
      - "9592"
      - "9593"
      - "9594"
      - "9595"
      - "9596"
      - "9597"
      - "9598"
      - "9599"
      - "9600"
      - "9601"
      - "9602"
      - "9603"
      - "9604"
      - "9605"
      - "9606"
      - "9607"
      - "9608"
      - "9609"
      - "9610"
      - "9611"
      - "9612"
      - "9613"
      - "9614"
      - "9615"
      - "9616"
      - "9617"
      - "9618"
      - "9619"
      - "9620"
      - "9621"
      - "9622"
      - "9623"
      - "9624"
      - "9625"
      - "9626"
      - "9627"
      - "9628"
      - "9629"
      - "9630"
      - "9631"
      - "9632"
      - "9633"
      - "9634"
      - "9635"
      - "9636"
      - "9637"
      - "9638"
      - "9639"
      - "9640"
      - "9641"
      - "9642"
      - "9643"
      - "9644"
      - "9645"
      - "9646"
      - "9647"
      - "9648"
      - "9649"
      - "9650"
      - "9651"
      - "9652"
      - "9653"
      - "9654"
      - "9655"
      - "9656"
      - "9657"
      - "9658"
      - "9659"
      - "9660"
      - "9661"
      - "9662"
      - "9663"
      - "9664"
      - "9665"
      - "9666"
      - "9667"
      - "9668"
      - "9669"
      - "9670"
      - "9671"
      - "9672"
      - "9673"
      - "9674"
      - "9675"
      - "9676"
      - "9677"
      - "9678"
      - "9679"
      - "9680"
      - "9681"
      - "9682"
      - "9683"
      - "9684"
      - "9685"
      - "9686"
      - "9687"
      - "9688"
      - "9689"
      - "9690"
      - "9691"
      - "9692"
      - "9693"
      - "9694"
      - "9695"
      - "9696"
      - "9697"
      - "9698"
      - "9699"
      - "9700"
      - "9701"
      - "9702"
      - "9703"
      - "9704"
      - "9705"
      - "9706"
      - "9707"
      - "9708"
      - "9709"
      - "9710"
      - "9711"
      - "9712"
      - "9713"
      - "9714"
      - "9715"
      - "9716"
      - "9717"
      - "9718"
      - "9719"
      - "9720"
      - "9721"
      - "9722"
      - "9723"
      - "9724"
      - "9725"
      - "9726"
      - "9727"
      - "9728"
      - "9729"
      - "9730"
      - "9731"
      - "9732"
      - "9733"
      - "9734"
      - "9735"
      - "9736"
      - "9737"
      - "9738"
      - "9739"
      - "9740"
      - "9741"
      - "9742"
      - "9743"
      - "9744"
      - "9745"
      - "9746"
      - "9747"
      - "9748"
      - "9749"
      - "9750"
      - "9751"
      - "9752"
      - "9753"
      - "9754"
      - "9755"
      - "9756"
      - "9757"
      - "9758"
      - "9759"
      - "9760"
      - "9761"
      - "9762"
      - "9763"
      - "9764"
      - "9765"
      - "9766"
      - "9767"
      - "9768"
      - "9769"
      - "9770"
      - "9771"
      - "9772"
      - "9773"
      - "9774"
      - "9775"
      - "9776"
      - "9777"
      - "9778"
      - "9779"
      - "9780"
      - "9781"
      - "9782"
      - "9783"
      - "9784"
      - "9785"
      - "9786"
      - "9787"
      - "9788"
      - "9789"
      - "9790"
      - "9791"
      - "9792"
      - "9793"
      - "9794"
      - "9795"
      - "9796"
      - "9797"
      - "9798"
      - "9799"
      - "9800"
      - "9801"
      - "9802"
      - "9803"
      - "9804"
      - "9805"
      - "9806"
      - "9807"
      - "9808"
      - "9809"
      - "9810"
      - "9811"
      - "9812"
      - "9813"
      - "9814"
      - "9815"
      - "9816"
      - "9817"
      - "9818"
      - "9819"
      - "9820"
      - "9821"
      - "9822"
      - "9823"
      - "9824"
      - "9825"
      - "9826"
      - "9827"
      - "9828"
      - "9829"
      - "9830"
      - "9831"
      - "9832"
      - "9833"
      - "9834"
      - "9835"
      - "9836"
      - "9837"
      - "9838"
      - "9839"
      - "9840"
      - "9841"
      - "9842"
      - "9843"
      - "9844"
      - "9845"
      - "9846"
      - "9847"
      - "9848"
      - "9849"
      - "9850"
      - "9851"
      - "9852"
      - "9853"
      - "9854"
      - "9855"
      - "9856"
      - "9857"
      - "9858"
      - "9859"
      - "9860"
      - "9861"
      - "9862"
      - "9863"
      - "9864"
      - "9865"
      - "9866"
      - "9867"
      - "9868"
      - "9869"
      - "9870"
      - "9871"
      - "9872"
      - "9873"
      - "9874"
      - "9875"
      - "9876"
      - "9877"
      - "9878"
      - "9879"
      - "9880"
      - "9881"
      - "9882"
      - "9883"
      - "9884"
      - "9885"
      - "9886"
      - "9887"
      - "9888"
      - "9889"
      - "9890"
      - "9891"
      - "9892"
      - "9893"
      - "9894"
      - "9895"
      - "9896"
      - "9897"
      - "9898"
      - "9899"
      - "9900"
      - "9901"
      - "9902"
      - "9903"
      - "9904"
      - "9905"
      - "9906"
      - "9907"
      - "9908"
      - "9909"
      - "9910"
      - "9911"
      - "9912"
      - "9913"
      - "9914"
      - "9915"
      - "9916"
      - "9917"
      - "9918"
      - "9919"
      - "9920"
      - "9921"
      - "9922"
      - "9923"
      - "9924"
      - "9925"
      - "9926"
      - "9927"
      - "9928"
      - "9929"
      - "9930"
      - "9931"
      - "9932"
      - "9933"
      - "9934"
      - "9935"
      - "9936"
      - "9937"
      - "9938"
      - "9939"
      - "9940"
      - "9941"
      - "9942"
      - "9943"
      - "9944"
      - "9945"
      - "9946"
      - "9947"
      - "9948"
      - "9949"
      - "9950"
      - "9951"
      - "9952"
      - "9953"
      - "9954"
      - "9955"
      - "9956"
      - "9957"
      - "9958"
      - "9959"
      - "9960"
      - "9961"
      - "9962"
      - "9963"
      - "9964"
      - "9965"
      - "9966"
      - "9967"
      - "9968"
      - "9969"
      - "9970"
      - "9971"
      - "9972"
      - "9973"
      - "9974"
      - "9975"
      - "9976"
      - "9977"
      - "9978"
      - "9979"
      - "9980"
      - "9981"
      - "9982"
      - "9983"
      - "9984"
      - "9985"
      - "9986"
      - "9987"
      - "9988"
      - "9989"
      - "9990"
      - "9991"
      - "9992"
      - "9993"
      - "9994"
      - "9995"
      - "9996"
      - "9997"
      - "9998"
      - "9999"
      - "10000"
      - "10001"
      - "10002"
      - "10003"
      - "10004"
      - "10005"
      - "10006"
      - "10007"
      - "10008"
      - "10009"
      - "10010"
      - "10011"
      - "10012"
      - "10013"
      - "10014"
      - "10015"
      - "10016"
      - "10017"
      - "10018"
      - "10019"
      - "10020"
      - "10021"
      - "10022"
      - "10023"
      - "10024"
      - "10025"
      - "10026"
      - "10027"
      - "10028"
      - "10029"
      - "10030"
      - "10031"
      - "10032"
      - "10033"
      - "10034"
      - "10035"
      - "10036"
      - "10037"
      - "10038"
      - "10039"
      - "10040"
      - "10041"
      - "10042"
      - "10043"
      - "10044"
      - "10045"
      - "10046"
      - "10047"
      - "10048"
      - "10049"
      - "10050"
      - "10051"
      - "10052"
      - "10053"
      - "10054"
      - "10055"
      - "10056"
      - "10057"
      - "10058"
      - "10059"
      - "10060"
      - "10061"
      - "10062"
      - "10063"
      - "10064"
      - "10065"
      - "10066"
      - "10067"
      - "10068"
      - "10069"
      - "10070"
      - "10071"
      - "10072"
      - "10073"
      - "10074"
      - "10075"
      - "10076"
      - "10077"
      - "10078"
      - "10079"
      - "10080"
      - "10081"
      - "10082"
      - "10083"
      - "10084"
      - "10085"
      - "10086"
      - "10087"
      - "10088"
      - "10089"
      - "10090"
      - "10091"
      - "10092"
      - "10093"
      - "10094"
      - "10095"
      - "10096"
      - "10097"
      - "10098"
      - "10099"
      - "10100"
      - "10101"
      - "10102"
      - "10103"
      - "10104"
      - "10105"
      - "10106"
      - "10107"
      - "10108"
      - "10109"
      - "10110"
      - "10111"
      - "10112"
      - "10113"
      - "10114"
      - "10115"
      - "10116"
      - "10117"
      - "10118"
      - "10119"
      - "10120"
      - "10121"
      - "10122"
      - "10123"
      - "10124"
      - "10125"
      - "10126"
      - "10127"
      - "10128"
      - "10129"
      - "10130"
      - "10131"
      - "10132"
      - "10133"
      - "10134"
      - "10135"
      - "10136"
      - "10137"
      - "10138"
      - "10139"
      - "10140"
      - "10141"
      - "10142"
      - "10143"
      - "10144"
      - "10145"
      - "10146"
      - "10147"
      - "10148"
      - "10149"
      - "10150"
      - "10151"
      - "10152"
      - "10153"
      - "10154"
      - "10155"
      - "10156"
      - "10157"
      - "10158"
      - "10159"
      - "10160"
      - "10161"
      - "10162"
      - "10163"
      - "10164"
      - "10165"
      - "10166"
      - "10167"
      - "10168"
      - "10169"
      - "10170"
      - "10171"
      - "10172"
      - "10173"
      - "10174"
      - "10175"
      - "10176"
      - "10177"
      - "10178"
      - "10179"
      - "10180"
      - "10181"
      - "10182"
      - "10183"
      - "10184"
      - "10185"
      - "10186"
      - "10187"
      - "10188"
      - "10189"
      - "10190"
      - "10191"
      - "10192"
      - "10193"
      - "10194"
      - "10195"
      - "10196"
      - "10197"
      - "10198"
      - "10199"
      - "10200"
      - "10201"
      - "10202"
      - "10203"
      - "10204"
      - "13717"
      - "13718"
      - "200005028"
      - "200005029"
      - "200005058"
      - "200005059"
      - "200005067"
      - "200005074"
      - "200005075"
      - "200005195"
      - "200005196"
      - "200005197"
      - "200005198"
      - "200005201"
      - "200005456"
      - "200005491"
      - "200005612"
      - "200005613"
      - "200005614"
      - "200005615"
      - "200005617"
      - "200006267"
      - "200006268"
      - "200006269"
      - "200006270"
      - "200006271"
      - "200006272"
      - "200006273"
      - "200006342"
      - "200006353"
      - "200006357"
      - "200006363"
      - "200006369"
      - "200006372"
      - "200008608"
      - "200010818"
      - "200010819"
      - "200010820"
      - "200012238"
      - "200012239"
      - "200012240"
      - "200012241"
      - "200012242"
      - "200012243"
      - "200012244"
      - "200012245"
      - "200015284"
      - "200018553"
      - "200018554"
      - "200018555"
      - "200018556"
      - "200018557"
      - "200018558"
      - "200018559"
      - "200018560"
      - "200018561"
      - "200018562"
      - "200018563"
      - "200018564"
      - "200018565"
      - "200018566"
      - "200018567"
      - "200018568"
      - "200018569"
      - "200018570"
      - "200018571"
      - "200018572"
      - "200018573"
      - "200018742"
      - "200018743"
      - "200018745"
      - "200018746"
      - "200018747"
      - "200018748"
      - "200018749"
      - "200018750"
      - "200018751"
      - "200018752"
      - "200018754"
      - "200018755"
      - "200018756"
      - "200018757"
      - "200018758"
      - "200018761"
      - "200022001"
      - "200022002"
      - "200022004"
      - "200022005"
      - "200022006"
      - "200022007"
      - "200022008"
      - "200022009"
      - "200022012"
      - "200022013"
      - "200022014"
      - "200022015"
      - "200022016"
      - "200022017"
      - "200022018"
      - "200022019"
      - "200022020"
      - "200022400"
      - "200022401"
      - "200022402"
      - "200022403"
      - "200022404"
      - "200022405"
      - "200022406"
      - "200022407"
      - "200022408"
      - "200022409"
      - "200022410"
      - "200022411"
      - "200022412"
      - "200022413"
      - "200022414"
      - "200022415"
      - "200022416"
      - "200022417"
      - "200022418"
      - "200022419"
      - "200022558"
      - "200022559"
      - "200022560"
      - "200022561"
      - "200022562"
      - "200022563"
      - "200022564"
      - "200022565"
      - "200022566"
      - "200022567"
      - "200022568"
      - "200022569"
      - "200022570"
      - "200022571"
      - "200022572"
      - "200022573"
      - "200022574"
      - "200022860"
      - "200022861"
      - "200022862"
      - "200022864"
      - "200022866"
      - "200022867"
      - "200022870"
      - "200022871"
      - "200022873"
      - "200022875"
      - "200022876"
      - "200022877"
      - "200022880"
      - "200022881"
      - "200022882"
      - "200022883"
      - "200022885"
      - "200022886"
      - "200022887"
      - "200022888"
      - "200022889"
      - "200022890"
      - "200022891"
      - "200022892"
      - "200022893"
      - "200022894"
      - "200022895"
      - "200022896"
      - "200022897"
      - "200022898"
      - "200022899"
      - "200022900"
      - "200022901"
      - "200022902"
      - "200022903"
      - "200022904"
      - "200022905"
      - "200022906"
      - "200022907"
      - "200025387"
      - "200025388"
      - "200025389"
      - "200025390"
      - "200025391"
      - "200033724"
      - "200033725"
      - "200033726"
      - "200033727"
      - "200033728"
      - "200033729"
      - "200033730"
      - "200033731"
      - "200033732"
      - "200033733"
      - "200033734"
      - "200033735"
      - "200033736"
      - "200033737"
      - "200033738"
      - "200033739"
      - "200033740"
      - "200005037"
      - "200005038"
      - "200005206"
      - "200005208"
      - "200005210"
      - "200005212"
      - "200005214"
      - "200005436"
      - "200005438"
      - "200005440"
      - "200005442"
      - "200005444"
      - "200005466"
      - "200005493"
      - "200005637"
      - "200005647"
      - "200005651"
      - "200005653"
      - "200005656"
      - "200006274"
      - "200006277"
      - "200006279"
      - "200006281"
      - "200006283"
      - "200006285"
      - "200006287"
      - "200006556"
      - "200006558"
      - "200006560"
      - "200006562"
      - "200006564"
      - "200006578"
      - "200008611"
      - "200010821"
      - "200010823"
      - "200010825"
      - "200012246"
      - "200012247"
      - "200012248"
      - "200012249"
      - "200012250"
      - "200012251"
      - "200012252"
      - "200012253"
      - "200015287"
      - "200018574"
      - "200018583"
      - "200018584"
      - "200018585"
      - "200018586"
      - "200018587"
      - "200018588"
      - "200018589"
      - "200018590"
      - "200018591"
      - "200018592"
      - "200018593"
      - "200018594"
      - "200018596"
      - "200018597"
      - "200018598"
      - "200018599"
      - "200018600"
      - "200018601"
      - "200018602"
      - "200018603"
      - "200018762"
      - "200018763"
      - "200018765"
      - "200018766"
      - "200018767"
      - "200018768"
      - "200018769"
      - "200018770"
      - "200018771"
      - "200018772"
      - "200018774"
      - "200018775"
      - "200018776"
      - "200018777"
      - "200018778"
      - "200018781"
      - "200022021"
      - "200022023"
      - "200022024"
      - "200022025"
      - "200022026"
      - "200022027"
      - "200022028"
      - "200022029"
      - "200022032"
      - "200022033"
      - "200022034"
      - "200022036"
      - "200022037"
      - "200022038"
      - "200022039"
      - "200022040"
      - "200022062"
      - "200022420"
      - "200022421"
      - "200022422"
      - "200022423"
      - "200022424"
      - "200022425"
      - "200022426"
      - "200022427"
      - "200022428"
      - "200022429"
      - "200022430"
      - "200022431"
      - "200022432"
      - "200022433"
      - "200022434"
      - "200022435"
      - "200022436"
      - "200022437"
      - "200022438"
      - "200022439"
      - "200022557"
      - "200022578"
      - "200022579"
      - "200022580"
      - "200022581"
      - "200022582"
      - "200022583"
      - "200022584"
      - "200022585"
      - "200022586"
      - "200022587"
      - "200022588"
      - "200022589"
      - "200022590"
      - "200022591"
      - "200022592"
      - "200022593"
      - "200022910"
      - "200022920"
      - "200022950"
      - "200022969"
      - "200022983"
      - "200022991"
      - "200023025"
      - "200023041"
      - "200023053"
      - "200023084"
      - "200023095"
      - "200023133"
      - "200023173"
      - "200023207"
      - "200023218"
      - "200023314"
      - "200023360"
      - "200023402"
      - "200023438"
      - "200023444"
      - "200023459"
      - "200023465"
      - "200023471"
      - "200023477"
      - "200023483"
      - "200023489"
      - "200023495"
      - "200023501"
      - "200023507"
      - "200023513"
      - "200023519"
      - "200023525"
      - "200023531"
      - "200023537"
      - "200023545"
      - "200023563"
      - "200023570"
      - "200023576"
      - "200023582"
      - "200025393"
      - "200025394"
      - "200025395"
      - "200025396"
      - "200025397"
      - "200005046"
      - "200005047"
      - "200005048"
      - "200005216"
      - "200005218"
      - "200005220"
      - "200005222"
      - "200005224"
      - "200005446"
      - "200005448"
      - "200005450"
      - "200005452"
      - "200005454"
      - "200005470"
      - "200005495"
      - "200005659"
      - "200005673"
      - "200005675"
      - "200005677"
      - "200005679"
      - "200006289"
      - "200006291"
      - "200006294"
      - "200006296"
      - "200006298"
      - "200006300"
      - "200006302"
      - "200006319"
      - "200006321"
      - "200006323"
      - "200006325"
      - "200006327"
      - "200006329"
      - "200006331"
      - "200006570"
      - "200006571"
      - "200006572"
      - "200006573"
      - "200006574"
      - "200006575"
      - "200008614"
      - "200010827"
      - "200010829"
      - "200010831"
      - "200010843"
      - "200010845"
      - "200010847"
      - "200012262"
      - "200012263"
      - "200012264"
      - "200012265"
      - "200012266"
      - "200012267"
      - "200012268"
      - "200012269"
      - "200015289"
      - "200015293"
      - "200018628"
      - "200018629"
      - "200018630"
      - "200018631"
      - "200018632"
      - "200018633"
      - "200018634"
      - "200018635"
      - "200018636"
      - "200018637"
      - "200018638"
      - "200018639"
      - "200018640"
      - "200018641"
      - "200018642"
      - "200018643"
      - "200018644"
      - "200018645"
      - "200018646"
      - "200018647"
      - "200018668"
      - "200018782"
      - "200018783"
      - "200018785"
      - "200018786"
      - "200018787"
      - "200018788"
      - "200018789"
      - "200018790"
      - "200018791"
      - "200018792"
      - "200018794"
      - "200018795"
      - "200018796"
      - "200018797"
      - "200018798"
      - "200018801"
      - "200022041"
      - "200022043"
      - "200022044"
      - "200022045"
      - "200022046"
      - "200022047"
      - "200022049"
      - "200022050"
      - "200022053"
      - "200022054"
      - "200022055"
      - "200022057"
      - "200022058"
      - "200022059"
      - "200022060"
      - "200022061"
      - "200022100"
      - "200022182"
      - "200022440"
      - "200022441"
      - "200022442"
      - "200022443"
      - "200022444"
      - "200022445"
      - "200022446"
      - "200022447"
      - "200022448"
      - "200022449"
      - "200022450"
      - "200022451"
      - "200022452"
      - "200022453"
      - "200022454"
      - "200022455"
      - "200022456"
      - "200022457"
      - "200022458"
      - "200022459"
      - "200022617"
      - "200022618"
      - "200022619"
      - "200022620"
      - "200022621"
      - "200022622"
      - "200022623"
      - "200022624"
      - "200022625"
      - "200022626"
      - "200022627"
      - "200022628"
      - "200022629"
      - "200022630"
      - "200022631"
      - "200022632"
      - "200022633"
      - "200022912"
      - "200022937"
      - "200022956"
      - "200022970"
      - "200022984"
      - "200022993"
      - "200023027"
      - "200023042"
      - "200023054"
      - "200023087"
      - "200023096"
      - "200023136"
      - "200023183"
      - "200023209"
      - "200023219"
      - "200023315"
      - "200023361"
      - "200023403"
      - "200023439"
      - "200023445"
      - "200023460"
      - "200023466"
      - "200023472"
      - "200023478"
      - "200023484"
      - "200023490"
      - "200023496"
      - "200023502"
      - "200023508"
      - "200023514"
      - "200023520"
      - "200023526"
      - "200023532"
      - "200023538"
      - "200023546"
      - "200023564"
      - "200023571"
      - "200023577"
      - "200023583"
      - "200025405"
      - "200025406"
      - "200025407"
      - "200025408"
      - "200025409"
      - "200025430"
      - "200025431"
      - "200025432"
      - "200025433"
      - "200025434"
      - "200005052"
      - "200005053"
      - "200005054"
      - "200005226"
      - "200005228"
      - "200005230"
      - "200005232"
      - "200005234"
      - "200005457"
      - "200005459"
      - "200005462"
      - "200005464"
      - "200005467"
      - "200005472"
      - "200005497"
      - "200005780"
      - "200005800"
      - "200005804"
      - "200005805"
      - "200005807"
      - "200006304"
      - "200006306"
      - "200006308"
      - "200006310"
      - "200006312"
      - "200006314"
      - "200006316"
      - "200006715"
      - "200006717"
      - "200006719"
      - "200006721"
      - "200006723"
      - "200006725"
      - "200008616"
      - "200010833"
      - "200010835"
      - "200010837"
      - "200012278"
      - "200012280"
      - "200012282"
      - "200012284"
      - "200012286"
      - "200012288"
      - "200012290"
      - "200012292"
      - "200015291"
      - "200018670"
      - "200018672"
      - "200018673"
      - "200018674"
      - "200018675"
      - "200018676"
      - "200018677"
      - "200018678"
      - "200018679"
      - "200018680"
      - "200018681"
      - "200018683"
      - "200018684"
      - "200018685"
      - "200018686"
      - "200018687"
      - "200018688"
      - "200018689"
      - "200018690"
      - "200018691"
      - "200018714"
      - "200018822"
      - "200018824"
      - "200018828"
      - "200018830"
      - "200018833"
      - "200018834"
      - "200018835"
      - "200018836"
      - "200018837"
      - "200018842"
      - "200018844"
      - "200018846"
      - "200018848"
      - "200018850"
      - "200018856"
      - "200018884"
      - "200022102"
      - "200022104"
      - "200022110"
      - "200022111"
      - "200022113"
      - "200022115"
      - "200022116"
      - "200022118"
      - "200022123"
      - "200022125"
      - "200022127"
      - "200022129"
      - "200022130"
      - "200022140"
      - "200022141"
      - "200022142"
      - "200022144"
      - "200022460"
      - "200022461"
      - "200022462"
      - "200022465"
      - "200022466"
      - "200022467"
      - "200022468"
      - "200022469"
      - "200022470"
      - "200022471"
      - "200022472"
      - "200022473"
      - "200022474"
      - "200022475"
      - "200022476"
      - "200022477"
      - "200022478"
      - "200022479"
      - "200022480"
      - "200022481"
      - "200022657"
      - "200022658"
      - "200022660"
      - "200022661"
      - "200022662"
      - "200022663"
      - "200022664"
      - "200022665"
      - "200022667"
      - "200022668"
      - "200022669"
      - "200022670"
      - "200022671"
      - "200022672"
      - "200022673"
      - "200022674"
      - "200022675"
      - "200022918"
      - "200022939"
      - "200022960"
      - "200022974"
      - "200022987"
      - "200022997"
      - "200023034"
      - "200023045"
      - "200023056"
      - "200023091"
      - "200023121"
      - "200023141"
      - "200023188"
      - "200023214"
      - "200023222"
      - "200023319"
      - "200023386"
      - "200023432"
      - "200023442"
      - "200023457"
      - "200023463"
      - "200023469"
      - "200023475"
      - "200023481"
      - "200023487"
      - "200023493"
      - "200023499"
      - "200023505"
      - "200023511"
      - "200023517"
      - "200023523"
      - "200023529"
      - "200023535"
      - "200023541"
      - "200023561"
      - "200023568"
      - "200023574"
      - "200023580"
      - "200023587"
      - "200025417"
      - "200025419"
      - "200025421"
      - "200025423"
      - "200025426"
      - "200005027"
      - "200005028"
      - "200005029"
      - "200005058"
      - "200005059"
      - "200005067"
      - "200005074"
      - "200005075"
      - "200005195"
      - "200005196"
      - "200005197"
      - "200005198"
      - "200005201"
      - "200005456"
      - "200005491"
      - "200005612"
      - "200005613"
      - "200005614"
      - "200005615"
      - "200005617"
      - "200006267"
      - "200006268"
      - "200006269"
      - "200006270"
      - "200006271"
      - "200006272"
      - "200006273"
      - "200006342"
      - "200006353"
      - "200006357"
      - "200006363"
      - "200006369"
      - "200006372"
      - "200008608"
      - "200010818"
      - "200010819"
      - "200010820"
      - "200012238"
      - "200012239"
      - "200012240"
      - "200012241"
      - "200012242"
      - "200012243"
      - "200012244"
      - "200012245"
      - "200015284"
      - "200018553"
      - "200018554"
      - "200018555"
      - "200018556"
      - "200018557"
      - "200018558"
      - "200018559"
      - "200018560"
      - "200018561"
      - "200018562"
      - "200018563"
      - "200018564"
      - "200018565"
      - "200018566"
      - "200018567"
      - "200018568"
      - "200018569"
      - "200018570"
      - "200018571"
      - "200018572"
      - "200018573"
      - "200018742"
      - "200018743"
      - "200018745"
      - "200018746"
      - "200018747"
      - "200018748"
      - "200018749"
      - "200018750"
      - "200018751"
      - "200018752"
      - "200018754"
      - "200018755"
      - "200018756"
      - "200018757"
      - "200018758"
      - "200018761"
      - "200022001"
      - "200022002"
      - "200022004"
      - "200022005"
      - "200022006"
      - "200022007"
      - "200022008"
      - "200022009"
      - "200022012"
      - "200022013"
      - "200022014"
      - "200022015"
      - "200022016"
      - "200022017"
      - "200022018"
      - "200022019"
      - "200022020"
      - "200022400"
      - "200022401"
      - "200022402"
      - "200022403"
      - "200022404"
      - "200022405"
      - "200022406"
      - "200022407"
      - "200022408"
      - "200022409"
      - "200022410"
      - "200022411"
      - "200022412"
      - "200022413"
      - "200022414"
      - "200022415"
      - "200022416"
      - "200022417"
      - "200022418"
      - "200022419"
      - "200022558"
      - "200022559"
      - "200022560"
      - "200022561"
      - "200022562"
      - "200022563"
      - "200022564"
      - "200022565"
      - "200022566"
      - "200022567"
      - "200022568"
      - "200022569"
      - "200022570"
      - "200022571"
      - "200022572"
      - "200022573"
      - "200022574"
      - "200022860"
      - "200022861"
      - "200022862"
      - "200022864"
      - "200022866"
      - "200022867"
      - "200022870"
      - "200022871"
      - "200022873"
      - "200022875"
      - "200022876"
      - "200022877"
      - "200022880"
      - "200022881"
      - "200022882"
      - "200022883"
      - "200022885"
      - "200022886"
      - "200022887"
      - "200022888"
      - "200022889"
      - "200022890"
      - "200022891"
      - "200022892"
      - "200022893"
      - "200022894"
      - "200022895"
      - "200022896"
      - "200022897"
      - "200022898"
      - "200022899"
      - "200022900"
      - "200022901"
      - "200022902"
      - "200022903"
      - "200022904"
      - "200022905"
      - "200022906"
      - "200022907"
      - "200025387"
      - "200025388"
      - "200025389"
      - "200025390"
      - "200025391"
  Subgraph-24:
    id: "24"
    name: PC_PROD
    steps:
      - "11139"
      - "11140"
      - "11141"
      - "11142"
      - "11143"
      - "11144"
      - "11145"
      - "11146"
      - "11147"
      - "11148"
      - "11680"
      - "11681"
      - "11682"
      - "11683"
      - "11684"
      - "11685"
      - "11686"
      - "11687"
      - "11688"
      - "11689"
      - "11690"
      - "11691"
      - "11692"
      - "11693"
      - "11694"
      - "11695"
      - "11696"
      - "11697"
      - "11698"
      - "11699"
      - "11700"
      - "11701"
      - "11702"
      - "11703"
      - "11704"
      - "11705"
      - "11706"
      - "11707"
      - "11708"
      - "11709"
      - "11710"
      - "11711"
      - "11712"
      - "11713"
      - "11714"
      - "11715"
      - "11716"
      - "11717"
      - "11718"
      - "11719"
      - "11720"
      - "11721"
      - "11722"
      - "11723"
      - "11724"
      - "11725"
      - "11726"
      - "11727"
      - "11728"
      - "11729"
      - "11730"
      - "11731"
      - "11732"
      - "11733"
      - "11734"
      - "11735"
      - "11736"
      - "11737"
      - "11738"
      - "11739"
      - "11740"
      - "11741"
      - "11742"
      - "11743"
      - "11744"
      - "11745"
      - "11746"
      - "11747"
      - "11748"
      - "11749"
      - "11750"
      - "11751"
      - "11752"
      - "11753"
      - "11754"
      - "11755"
      - "11756"
      - "11757"
      - "11758"
      - "11759"
      - "11760"
      - "11761"
      - "11762"
      - "11763"
      - "11764"
      - "11765"
      - "11766"
      - "11767"
      - "11768"
      - "11769"
      - "11770"
      - "11771"
      - "11772"
      - "11773"
      - "11774"
      - "11775"
      - "11776"
      - "11777"
      - "11778"
      - "11779"
      - "11780"
      - "11781"
      - "11782"
      - "11783"
      - "11784"
      - "11785"
      - "11786"
      - "11787"
      - "11788"
      - "11789"
      - "11790"
      - "11791"
      - "11792"
      - "11793"
      - "11794"
      - "11795"
      - "11796"
      - "11797"
      - "11798"
      - "11799"
      - "11800"
      - "11801"
      - "11802"
      - "11803"
      - "11804"
      - "11805"
      - "11806"
      - "11807"
      - "11808"
      - "11809"
      - "11810"
      - "11811"
      - "11812"
      - "11813"
      - "11814"
      - "11815"
      - "11816"
      - "11817"
      - "11818"
      - "11819"
      - "11820"
      - "11821"
      - "11822"
      - "11823"
      - "11824"
      - "11825"
      - "11826"
      - "11827"
      - "11828"
      - "11829"
      - "11830"
      - "11831"
      - "11832"
      - "11833"
      - "11834"
      - "11835"
      - "11836"
      - "11837"
      - "11838"
      - "11839"
      - "11840"
      - "11841"
      - "11842"
      - "11843"
      - "11844"
      - "11845"
      - "11846"
      - "11847"
      - "11848"
      - "11849"
      - "11850"
      - "11851"
      - "11852"
      - "11853"
      - "11854"
      - "11855"
      - "11856"
      - "11857"
      - "11858"
      - "11859"
      - "11860"
      - "11861"
      - "11862"
      - "11863"
      - "11864"
      - "11865"
      - "11866"
      - "11867"
      - "11868"
      - "11869"
      - "11870"
      - "11871"
      - "11872"
      - "11873"
      - "11874"
      - "11875"
      - "11876"
      - "11877"
      - "11878"
      - "11879"
      - "11880"
      - "11881"
      - "11882"
      - "11883"
      - "11884"
      - "11885"
      - "11886"
      - "11887"
      - "11888"
      - "11889"
      - "11890"
      - "11891"
      - "11892"
      - "11893"
      - "11894"
      - "11895"
      - "11896"
      - "11897"
      - "11898"
      - "11899"
      - "11900"
      - "11901"
      - "11902"
      - "11903"
      - "11904"
      - "11905"
      - "11906"
      - "11907"
      - "11908"
      - "11909"
      - "11910"
      - "11911"
      - "11912"
      - "11913"
      - "11914"
      - "11915"
      - "11916"
      - "11917"
      - "11918"
      - "11919"
      - "11920"
      - "11921"
      - "11922"
      - "11923"
      - "11924"
      - "11925"
      - "11926"
      - "11927"
      - "11928"
      - "11929"
      - "11930"
      - "11931"
      - "11932"
      - "11933"
      - "11934"
      - "11935"
      - "11936"
      - "11937"
      - "11938"
      - "11939"
      - "11940"
      - "11941"
      - "11942"
      - "11943"
      - "11944"
      - "11945"
      - "11946"
      - "11947"
      - "11948"
      - "12628"
      - "12629"
      - "12630"
      - "12631"
      - "12632"
      - "12633"
      - "12634"
      - "12635"
      - "12636"
      - "12637"
      - "12638"
      - "12639"
      - "12640"
      - "12641"
      - "12642"
      - "12643"
      - "12644"
      - "12645"
      - "12646"
      - "12647"
      - "12648"
      - "12649"
      - "12650"
      - "12651"
      - "12652"
      - "12653"
      - "12654"
      - "12655"
      - "12656"
      - "12657"
      - "12658"
      - "12659"
      - "12660"
      - "12661"
      - "12662"
      - "12663"
      - "12664"
      - "12665"
      - "12666"
      - "12667"
      - "12668"
      - "12669"
      - "12670"
      - "12671"
      - "12672"
      - "12673"
      - "12674"
      - "12675"
      - "12676"
      - "12677"
      - "12678"
      - "12679"
      - "12680"
      - "12681"
      - "12682"
      - "12683"
      - "12684"
      - "12685"
      - "12686"
      - "12687"
      - "12688"
      - "12689"
      - "12690"
      - "12691"
      - "12692"
      - "12693"
      - "12694"
      - "12695"
      - "12696"
      - "12697"
      - "12698"
      - "12699"
      - "12700"
      - "12701"
      - "12702"
      - "12703"
      - "12704"
      - "12705"
      - "12706"
      - "12707"
      - "12708"
      - "12709"
      - "12710"
      - "12711"
      - "12712"
      - "12713"
      - "12714"
      - "12715"
      - "12716"
      - "12717"
      - "12718"
      - "12719"
      - "12720"
      - "12721"
      - "12722"
      - "12723"
      - "12724"
      - "12725"
      - "12726"
      - "12727"
      - "12728"
      - "12729"
      - "12730"
      - "12731"
      - "12732"
      - "12733"
      - "12734"
      - "12735"
      - "12736"
      - "12737"
      - "12738"
      - "12739"
      - "12740"
      - "12741"
      - "12742"
      - "12743"
      - "12744"
      - "12745"
      - "12746"
      - "12747"
      - "12748"
      - "12749"
      - "12750"
      - "12751"
      - "12752"
      - "12753"
      - "12754"
      - "12755"
      - "12756"
      - "12757"
      - "12758"
      - "12759"
      - "12760"
      - "12761"
      - "12762"
      - "12763"
      - "12764"
      - "12765"
      - "12766"
      - "12767"
      - "12768"
      - "12769"
      - "12770"
      - "12771"
      - "12772"
      - "12773"
      - "12774"
      - "12775"
      - "12776"
      - "12777"
      - "12778"
      - "12779"
      - "12780"
      - "12781"
      - "12782"
      - "12783"
      - "12784"
      - "12785"
      - "12786"
      - "12787"
      - "12788"
      - "12789"
      - "12790"
      - "12791"
      - "12792"
      - "12793"
      - "12794"
      - "12795"
      - "12796"
      - "12797"
      - "12798"
      - "12799"
      - "12800"
      - "12801"
      - "12802"
      - "12803"
      - "12804"
      - "12805"
      - "12806"
      - "12807"
      - "12808"
      - "12809"
      - "12810"
      - "12811"
      - "12812"
      - "12813"
      - "12814"
      - "12815"
      - "12816"
      - "12817"
      - "12818"
      - "12819"
      - "12820"
      - "12821"
      - "12822"
      - "12823"
      - "12824"
      - "12825"
      - "12826"
      - "12827"
      - "12828"
      - "12829"
      - "12830"
      - "12831"
      - "12832"
      - "12833"
      - "12834"
      - "12835"
      - "12836"
      - "12837"
      - "12838"
      - "12839"
      - "12840"
      - "12841"
      - "12842"
      - "12843"
      - "12844"
      - "12845"
      - "12846"
      - "12847"
      - "12848"
      - "12849"
      - "12850"
      - "12851"
      - "12852"
      - "12853"
      - "12854"
      - "12855"
      - "12856"
      - "12857"
      - "12858"
      - "12859"
      - "12860"
      - "12861"
      - "12862"
      - "12863"
      - "12864"
      - "12865"
      - "12866"
      - "12867"
      - "12868"
      - "12869"
      - "12870"
      - "12871"
      - "12872"
      - "12873"
      - "12874"
      - "12875"
      - "12876"
      - "12877"
      - "12878"
      - "12879"
      - "12880"
      - "12881"
      - "12882"
      - "12883"
      - "12884"
      - "12885"
      - "12886"
      - "12887"
      - "12888"
      - "12889"
      - "12890"
      - "12891"
      - "12892"
      - "12893"
      - "12894"
      - "12895"
      - "12896"
      - "12897"
      - "12898"
      - "12899"
      - "12900"
      - "12901"
      - "12902"
      - "12903"
      - "12904"
      - "12905"
      - "12906"
      - "12907"
      - "12908"
      - "12909"
      - "12910"
      - "12911"
      - "12912"
      - "12913"
      - "12914"
      - "12915"
      - "12916"
      - "12917"
      - "12918"
      - "12919"
      - "12920"
      - "12921"
      - "12922"
      - "12923"
      - "12924"
      - "12925"
      - "12926"
      - "12927"
      - "12928"
      - "12929"
      - "12930"
      - "12931"
      - "12932"
      - "12933"
      - "12934"
      - "12935"
      - "12936"
      - "12937"
      - "12938"
      - "12939"
      - "12940"
      - "12941"
      - "12942"
      - "12943"
      - "12944"
      - "12945"
      - "12946"
      - "12947"
      - "12948"
      - "12949"
      - "12950"
      - "12951"
      - "12952"
      - "12953"
      - "12954"
      - "12955"
      - "12956"
      - "12957"
      - "12958"
      - "12959"
      - "12960"
      - "12961"
      - "12962"
      - "12963"
      - "12964"
      - "12965"
      - "12966"
      - "12967"
      - "12968"
      - "12969"
      - "12970"
      - "12971"
      - "12972"
      - "12973"
      - "12974"
      - "12975"
      - "12976"
      - "12977"
      - "12978"
      - "12979"
      - "12980"
      - "12981"
      - "12982"
      - "12983"
      - "12984"
      - "12985"
      - "12986"
      - "12987"
      - "12988"
      - "12989"
      - "12990"
      - "12991"
      - "12992"
      - "12993"
      - "12994"
      - "12995"
      - "12996"
      - "12997"
      - "12998"
      - "12999"
      - "13000"
      - "13001"
      - "13002"
      - "13003"
      - "13004"
      - "13005"
      - "13006"
      - "13007"
      - "13008"
      - "13009"
      - "13010"
      - "13011"
      - "13012"
      - "13013"
      - "13014"
      - "13015"
      - "13016"
      - "13017"
      - "13018"
      - "13019"
      - "13020"
      - "13021"
      - "13022"
      - "13023"
      - "13024"
      - "13025"
      - "13026"
      - "13027"
      - "13028"
      - "13029"
      - "13030"
      - "13031"
      - "13032"
      - "13033"
      - "13034"
      - "13035"
      - "13036"
      - "13037"
      - "13038"
      - "13039"
      - "13040"
      - "13041"
      - "13042"
      - "13043"
      - "13044"
      - "13045"
      - "13046"
      - "13047"
      - "13048"
      - "13049"
      - "13050"
      - "13051"
      - "13052"
      - "13053"
      - "13054"
      - "13055"
      - "13056"
      - "13057"
      - "13058"
      - "13059"
      - "13060"
      - "13061"
      - "13062"
      - "13063"
      - "13064"
      - "13065"
      - "13066"
      - "13067"
      - "13068"
      - "13069"
      - "13070"
      - "13071"
      - "13072"
      - "13073"
      - "13074"
      - "13075"
      - "13076"
      - "13077"
      - "13078"
      - "13079"
      - "13080"
      - "13081"
      - "13082"
      - "13083"
      - "13084"
      - "13085"
      - "13086"
      - "13087"
      - "13088"
      - "13089"
      - "13090"
      - "13091"
      - "13092"
      - "13093"
      - "13094"
      - "13095"
      - "13096"
      - "13097"
      - "13098"
      - "13099"
      - "13100"
      - "13101"
      - "13102"
      - "13103"
      - "13104"
      - "13105"
      - "13106"
      - "13107"
      - "13108"
      - "13109"
      - "13110"
      - "13111"
      - "13112"
      - "13113"
      - "13114"
      - "13115"
      - "13116"
      - "13117"
      - "13118"
      - "13119"
      - "13120"
      - "13121"
      - "13122"
      - "13123"
      - "13124"
      - "13125"
      - "13126"
      - "13127"
      - "13128"
      - "13129"
      - "13130"
      - "13131"
      - "13132"
      - "13133"
      - "13134"
      - "13135"
      - "13136"
      - "13137"
      - "13138"
      - "13139"
      - "13140"
      - "13141"
      - "13142"
      - "13143"
      - "13144"
      - "13145"
      - "13146"
      - "13147"
      - "13148"
      - "13149"
      - "13150"
      - "13151"
      - "13152"
      - "13153"
      - "13154"
      - "13155"
      - "13156"
      - "13157"
      - "13158"
      - "13159"
      - "13160"
      - "13161"
      - "13162"
      - "13163"
      - "13164"
      - "13165"
      - "13166"
      - "13167"
      - "13168"
      - "13169"
      - "13170"
      - "13171"
      - "13172"
      - "13173"
      - "13174"
      - "13175"
      - "13176"
      - "13177"
      - "13178"
      - "13179"
      - "13180"
      - "13181"
      - "13182"
      - "13183"
      - "13184"
      - "13185"
      - "13186"
      - "13187"
      - "13188"
      - "13189"
      - "13190"
      - "13191"
      - "13192"
      - "13193"
      - "13194"
      - "13195"
      - "13196"
      - "13197"
      - "13198"
      - "13199"
      - "13200"
      - "13201"
      - "13202"
      - "13203"
      - "13204"
      - "13205"
      - "13206"
      - "13207"
      - "13208"
      - "13209"
      - "13210"
      - "13211"
      - "13212"
      - "13213"
      - "13214"
      - "13215"
      - "13216"
      - "13217"
      - "13218"
      - "13219"
      - "13220"
      - "13221"
      - "13222"
      - "13223"
      - "13224"
      - "13225"
      - "13226"
      - "13227"
      - "13228"
      - "13229"
      - "13230"
      - "13231"
      - "13232"
      - "13233"
      - "13234"
      - "13235"
      - "13236"
      - "13237"
      - "13238"
      - "13239"
      - "13240"
      - "13241"
      - "13242"
      - "13243"
      - "13244"
      - "13245"
      - "13246"
      - "13247"
      - "13248"
      - "13249"
      - "13250"
      - "13251"
      - "13252"
      - "13253"
      - "13254"
      - "13255"
      - "13256"
      - "13257"
      - "13258"
      - "13259"
      - "13260"
      - "13261"
      - "13262"
      - "13263"
      - "13264"
      - "13265"
      - "13266"
      - "13267"
      - "13268"
      - "13269"
      - "13270"
      - "13271"
      - "13272"
      - "13273"
      - "13274"
      - "13275"
      - "13276"
      - "13277"
      - "13278"
      - "13279"
      - "13280"
      - "13281"
      - "13282"
      - "13283"
      - "13284"
      - "13285"
      - "13286"
      - "13287"
      - "13288"
      - "13289"
      - "13290"
      - "13291"
      - "13292"
      - "13293"
      - "13294"
      - "13295"
      - "13296"
      - "13297"
      - "13298"
      - "13299"
      - "13300"
      - "13301"
      - "13302"
      - "13303"
      - "13304"
      - "13305"
      - "13306"
      - "13307"
      - "13308"
      - "13309"
      - "13310"
      - "13311"
      - "13312"
      - "13313"
      - "13314"
      - "13315"
      - "13316"
      - "13317"
      - "13318"
      - "13319"
      - "13320"
      - "13321"
      - "13322"
      - "13323"
      - "13324"
      - "13325"
      - "13326"
      - "13327"
      - "13328"
      - "13329"
      - "13330"
      - "13331"
      - "13332"
      - "13333"
      - "13334"
      - "13335"
      - "13336"
      - "13337"
      - "13338"
      - "13339"
      - "13340"
      - "13341"
      - "13342"
      - "13343"
      - "13344"
      - "13345"
      - "13346"
      - "13347"
      - "13348"
      - "13349"
      - "13350"
      - "13351"
      - "13352"
      - "13353"
      - "13354"
      - "13355"
      - "13356"
      - "13357"
      - "13358"
      - "13359"
      - "13360"
      - "13361"
      - "13362"
      - "13363"
      - "13364"
      - "13365"
      - "13366"
      - "13367"
      - "13368"
      - "13369"
      - "13370"
      - "13371"
      - "13372"
      - "13373"
      - "13374"
      - "13375"
      - "13376"
      - "13377"
      - "13378"
      - "13379"
      - "13380"
      - "13381"
      - "13382"
      - "13383"
      - "13384"
      - "13385"
      - "13386"
      - "13387"
      - "13388"
      - "13389"
      - "13390"
      - "13391"
      - "13392"
      - "13393"
      - "13394"
      - "13395"
      - "13396"
      - "13397"
      - "13398"
      - "13399"
      - "13400"
      - "13401"
      - "13402"
      - "13403"
      - "13404"
      - "13405"
      - "13406"
      - "13407"
      - "13408"
      - "13409"
      - "13410"
      - "13411"
      - "13412"
      - "13413"
      - "13414"
      - "13415"
      - "13416"
      - "13417"
      - "13418"
      - "13419"
      - "13420"
      - "13421"
      - "13422"
      - "13423"
      - "13424"
      - "13425"
      - "13426"
      - "13427"
      - "13428"
      - "13429"
      - "13430"
      - "13431"
      - "13432"
      - "13433"
      - "13434"
      - "13435"
      - "13436"
      - "13437"
      - "13438"
      - "13439"
      - "13440"
      - "13441"
      - "13442"
      - "13443"
      - "13444"
      - "13445"
      - "13446"
      - "13447"
      - "13448"
      - "13449"
      - "13450"
      - "13451"
      - "13452"
      - "13453"
      - "13454"
      - "13455"
      - "13456"
      - "13457"
      - "13458"
      - "13459"
      - "13460"
      - "13461"
      - "13462"
      - "13463"
      - "13464"
      - "13465"
      - "13466"
      - "13467"
      - "13468"
      - "13469"
      - "13470"
      - "13471"
      - "13472"
      - "13473"
      - "13474"
      - "13475"
      - "13476"
      - "13477"
      - "13478"
      - "13479"
      - "13480"
      - "13481"
      - "13482"
      - "13483"
      - "13484"
      - "13485"
      - "13486"
      - "13487"
      - "13488"
      - "13489"
      - "13490"
      - "13491"
      - "13492"
      - "13493"
      - "13494"
      - "13495"
      - "13496"
      - "13497"
      - "13498"
      - "13499"
      - "13500"
      - "13501"
      - "13502"
      - "13503"
      - "13504"
      - "13505"
      - "13506"
      - "13507"
      - "13508"
      - "13509"
      - "13510"
      - "13511"
      - "13512"
      - "13513"
      - "13514"
      - "13515"
      - "13516"
      - "13517"
      - "13518"
      - "13519"
      - "13520"
      - "13521"
      - "13522"
      - "13523"
      - "13524"
      - "13526"
      - "13527"
      - "13528"
      - "13529"
      - "13530"
      - "13531"
      - "13532"
      - "13533"
      - "13534"
      - "13535"
      - "13536"
      - "13537"
      - "13538"
      - "13539"
      - "13540"
      - "13541"
      - "13542"
      - "13543"
      - "13544"
      - "13545"
      - "13546"
      - "13547"
      - "13548"
      - "13549"
      - "13550"
      - "13551"
      - "13552"
      - "13553"
      - "13554"
      - "13555"
      - "13556"
      - "13557"
      - "13558"
      - "13559"
      - "13560"
      - "13561"
      - "13562"
      - "13563"
      - "13564"
      - "13565"
      - "13566"
      - "13567"
      - "13568"
      - "13569"
      - "13570"
      - "13571"
      - "13572"
      - "13573"
      - "13574"
      - "13575"
      - "13576"
      - "13577"
      - "13578"
      - "13579"
      - "13580"
      - "13581"
      - "13582"
      - "13583"
      - "13584"
      - "13585"
      - "13586"
version: 2
